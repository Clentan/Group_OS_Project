{"ast":null,"code":"var _jsxFileName = \"E:\\\\Group_OS_Project\\\\src\\\\pages\\\\Simulation\\\\pools\\\\ProcessPool\\\\ProcessPool.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './ProcessPool.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProcessPool = ({\n  allocatedResources = [],\n  onProcessUpdate\n}) => {\n  _s();\n  const [processes, setProcesses] = useState([{\n    id: 'P1',\n    name: 'Database Process',\n    status: 'waiting',\n    exec: '2.5s',\n    holds: [],\n    wants: ['DB', 'LOCK'],\n    priority: 1,\n    deadlockType: null\n  }, {\n    id: 'P2',\n    name: 'File Handler Process',\n    status: 'running',\n    exec: '1.8s',\n    holds: [],\n    wants: ['FILE', 'NET'],\n    priority: 2,\n    deadlockType: null\n  }, {\n    id: 'P3',\n    name: 'Network Process',\n    status: 'waiting',\n    exec: '3.2s',\n    holds: [],\n    wants: ['NET', 'DB'],\n    priority: 1,\n    deadlockType: null\n  }, {\n    id: 'P4',\n    name: 'System Process',\n    status: 'blocked',\n    exec: '0.9s',\n    holds: [],\n    wants: ['LOCK', 'FILE'],\n    priority: 3,\n    deadlockType: null\n  }]);\n\n  // Update process holdings based on allocated resources\n  useEffect(() => {\n    setProcesses(prevProcesses => prevProcesses.map(process => {\n      const processAllocations = allocatedResources.filter(allocation => allocation.process.id === process.id);\n      const holds = processAllocations.map(allocation => allocation.resource.name);\n\n      // Determine status based on holdings and wants\n      let status = 'waiting';\n      let deadlockType = null;\n      if (holds.length > 0) {\n        const hasAllWanted = process.wants.every(want => holds.includes(want));\n        if (hasAllWanted) {\n          status = 'running';\n        } else {\n          status = 'holding';\n          // Check for deadlock conditions\n          deadlockType = detectDeadlockType(process, holds, prevProcesses, allocatedResources);\n          if (deadlockType) {\n            status = 'deadlocked';\n          }\n        }\n      } else if (process.wants.length === 0) {\n        status = 'completed';\n      }\n      return {\n        ...process,\n        holds,\n        status,\n        deadlockType\n      };\n    }));\n  }, [allocatedResources]);\n  const detectDeadlockType = (currentProcess, currentHolds, allProcesses, allocations) => {\n    // Mutual Exclusion: Resources can only be held by one process\n    const mutualExclusion = currentHolds.length > 0;\n\n    // Hold and Wait: Process holds resources while waiting for others\n    const holdAndWait = currentHolds.length > 0 && currentProcess.wants.some(want => !currentHolds.includes(want));\n\n    // No Preemption: Resources cannot be forcibly taken\n    const noPreemption = true; // Always true in our simulation\n\n    // Circular Wait: Check if there's a circular dependency\n    const circularWait = checkCircularWait(currentProcess, allProcesses, allocations);\n    if (mutualExclusion && holdAndWait && noPreemption && circularWait) {\n      return 'full-deadlock';\n    } else if (holdAndWait && circularWait) {\n      return 'circular-wait';\n    } else if (holdAndWait) {\n      return 'hold-and-wait';\n    } else if (mutualExclusion) {\n      return 'mutual-exclusion';\n    }\n    return null;\n  };\n  const checkCircularWait = (currentProcess, allProcesses, allocations) => {\n    // Simplified circular wait detection\n    const processResourceMap = new Map();\n    allocations.forEach(allocation => {\n      if (!processResourceMap.has(allocation.process.id)) {\n        processResourceMap.set(allocation.process.id, []);\n      }\n      processResourceMap.get(allocation.process.id).push(allocation.resource.name);\n    });\n\n    // Check if current process wants resources held by others who want current process's resources\n    for (const wantedResource of currentProcess.wants) {\n      for (const [processId, heldResources] of processResourceMap) {\n        if (processId !== currentProcess.id && heldResources.includes(wantedResource)) {\n          const otherProcess = allProcesses.find(p => p.id === processId);\n          if (otherProcess && otherProcess.wants.some(want => currentProcess.holds.includes(want))) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  };\n  const getStatusColor = (status, deadlockType) => {\n    switch (status) {\n      case 'running':\n        return 'green';\n      case 'waiting':\n        return 'yellow';\n      case 'holding':\n        return 'blue';\n      case 'deadlocked':\n        return 'red';\n      case 'completed':\n        return 'purple';\n      case 'blocked':\n        return 'orange';\n      default:\n        return 'gray';\n    }\n  };\n  const getDeadlockTypeDisplay = deadlockType => {\n    switch (deadlockType) {\n      case 'mutual-exclusion':\n        return '🔒 Mutual Exclusion';\n      case 'hold-and-wait':\n        return '⏳ Hold & Wait';\n      case 'circular-wait':\n        return '🔄 Circular Wait';\n      case 'full-deadlock':\n        return '☠️ Full Deadlock';\n      default:\n        return null;\n    }\n  };\n  const formatResourceList = resources => {\n    return resources.length > 0 ? resources.join(', ') : 'None';\n  };\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"panel process-pool\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Process Pool\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }, this), processes.map((process, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `process process--${process.status}`,\n      id: `process${index + 1}`,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `process__status process__status--${getStatusColor(process.status, process.deadlockType)}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"process__info\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"process__header\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: process.id\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"process__name\",\n            children: [\"(\", process.name, \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 15\n          }, this), process.deadlockType && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"process__deadlock-type\",\n            children: getDeadlockTypeDisplay(process.deadlockType)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"process__details\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Status: \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: `status-text status-text--${process.status}`,\n              children: process.status.toUpperCase()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 183,\n              columnNumber: 28\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Exec Time: \", process.exec]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Priority: \", process.priority]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"process__resources\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"resource-line\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"resource-label\",\n              children: \"Holds:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 189,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: `resource-list ${process.holds.length > 0 ? 'has-resources' : 'no-resources'}`,\n              children: formatResourceList(process.holds)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 190,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"resource-line\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"resource-label\",\n              children: \"Wants:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 195,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: `resource-list ${process.wants.length > 0 ? 'wants-resources' : 'no-wants'}`,\n              children: formatResourceList(process.wants)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 196,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 11\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 167,\n    columnNumber: 5\n  }, this);\n};\n_s(ProcessPool, \"PKHHsEI3BJvzE2sFhd8U7GolPUI=\");\n_c = ProcessPool;\nexport default ProcessPool;\nvar _c;\n$RefreshReg$(_c, \"ProcessPool\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","ProcessPool","allocatedResources","onProcessUpdate","_s","processes","setProcesses","id","name","status","exec","holds","wants","priority","deadlockType","prevProcesses","map","process","processAllocations","filter","allocation","resource","length","hasAllWanted","every","want","includes","detectDeadlockType","currentProcess","currentHolds","allProcesses","allocations","mutualExclusion","holdAndWait","some","noPreemption","circularWait","checkCircularWait","processResourceMap","Map","forEach","has","set","get","push","wantedResource","processId","heldResources","otherProcess","find","p","getStatusColor","getDeadlockTypeDisplay","formatResourceList","resources","join","className","children","fileName","_jsxFileName","lineNumber","columnNumber","index","toUpperCase","_c","$RefreshReg$"],"sources":["E:/Group_OS_Project/src/pages/Simulation/pools/ProcessPool/ProcessPool.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './ProcessPool.css';\r\n\r\nconst ProcessPool = ({ allocatedResources = [], onProcessUpdate }) => {\r\n  const [processes, setProcesses] = useState([\r\n    { \r\n      id: 'P1', \r\n      name: 'Database Process',\r\n      status: 'waiting', \r\n      exec: '2.5s', \r\n      holds: [], \r\n      wants: ['DB', 'LOCK'],\r\n      priority: 1,\r\n      deadlockType: null\r\n    },\r\n    { \r\n      id: 'P2', \r\n      name: 'File Handler Process',\r\n      status: 'running', \r\n      exec: '1.8s', \r\n      holds: [], \r\n      wants: ['FILE', 'NET'],\r\n      priority: 2,\r\n      deadlockType: null\r\n    },\r\n    { \r\n      id: 'P3', \r\n      name: 'Network Process',\r\n      status: 'waiting', \r\n      exec: '3.2s', \r\n      holds: [], \r\n      wants: ['NET', 'DB'],\r\n      priority: 1,\r\n      deadlockType: null\r\n    },\r\n    { \r\n      id: 'P4', \r\n      name: 'System Process',\r\n      status: 'blocked', \r\n      exec: '0.9s', \r\n      holds: [], \r\n      wants: ['LOCK', 'FILE'],\r\n      priority: 3,\r\n      deadlockType: null\r\n    },\r\n  ]);\r\n\r\n  // Update process holdings based on allocated resources\r\n  useEffect(() => {\r\n    setProcesses(prevProcesses => \r\n      prevProcesses.map(process => {\r\n        const processAllocations = allocatedResources.filter(\r\n          allocation => allocation.process.id === process.id\r\n        );\r\n        \r\n        const holds = processAllocations.map(allocation => allocation.resource.name);\r\n        \r\n        // Determine status based on holdings and wants\r\n        let status = 'waiting';\r\n        let deadlockType = null;\r\n        \r\n        if (holds.length > 0) {\r\n          const hasAllWanted = process.wants.every(want => holds.includes(want));\r\n          if (hasAllWanted) {\r\n            status = 'running';\r\n          } else {\r\n            status = 'holding';\r\n            // Check for deadlock conditions\r\n            deadlockType = detectDeadlockType(process, holds, prevProcesses, allocatedResources);\r\n            if (deadlockType) {\r\n              status = 'deadlocked';\r\n            }\r\n          }\r\n        } else if (process.wants.length === 0) {\r\n          status = 'completed';\r\n        }\r\n        \r\n        return {\r\n          ...process,\r\n          holds,\r\n          status,\r\n          deadlockType\r\n        };\r\n      })\r\n    );\r\n  }, [allocatedResources]);\r\n\r\n  const detectDeadlockType = (currentProcess, currentHolds, allProcesses, allocations) => {\r\n    // Mutual Exclusion: Resources can only be held by one process\r\n    const mutualExclusion = currentHolds.length > 0;\r\n    \r\n    // Hold and Wait: Process holds resources while waiting for others\r\n    const holdAndWait = currentHolds.length > 0 && currentProcess.wants.some(want => !currentHolds.includes(want));\r\n    \r\n    // No Preemption: Resources cannot be forcibly taken\r\n    const noPreemption = true; // Always true in our simulation\r\n    \r\n    // Circular Wait: Check if there's a circular dependency\r\n    const circularWait = checkCircularWait(currentProcess, allProcesses, allocations);\r\n    \r\n    if (mutualExclusion && holdAndWait && noPreemption && circularWait) {\r\n      return 'full-deadlock';\r\n    } else if (holdAndWait && circularWait) {\r\n      return 'circular-wait';\r\n    } else if (holdAndWait) {\r\n      return 'hold-and-wait';\r\n    } else if (mutualExclusion) {\r\n      return 'mutual-exclusion';\r\n    }\r\n    \r\n    return null;\r\n  };\r\n\r\n  const checkCircularWait = (currentProcess, allProcesses, allocations) => {\r\n    // Simplified circular wait detection\r\n    const processResourceMap = new Map();\r\n    \r\n    allocations.forEach(allocation => {\r\n      if (!processResourceMap.has(allocation.process.id)) {\r\n        processResourceMap.set(allocation.process.id, []);\r\n      }\r\n      processResourceMap.get(allocation.process.id).push(allocation.resource.name);\r\n    });\r\n    \r\n    // Check if current process wants resources held by others who want current process's resources\r\n    for (const wantedResource of currentProcess.wants) {\r\n      for (const [processId, heldResources] of processResourceMap) {\r\n        if (processId !== currentProcess.id && heldResources.includes(wantedResource)) {\r\n          const otherProcess = allProcesses.find(p => p.id === processId);\r\n          if (otherProcess && otherProcess.wants.some(want => currentProcess.holds.includes(want))) {\r\n            return true;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    return false;\r\n  };\r\n\r\n  const getStatusColor = (status, deadlockType) => {\r\n    switch (status) {\r\n      case 'running': return 'green';\r\n      case 'waiting': return 'yellow';\r\n      case 'holding': return 'blue';\r\n      case 'deadlocked': return 'red';\r\n      case 'completed': return 'purple';\r\n      case 'blocked': return 'orange';\r\n      default: return 'gray';\r\n    }\r\n  };\r\n\r\n  const getDeadlockTypeDisplay = (deadlockType) => {\r\n    switch (deadlockType) {\r\n      case 'mutual-exclusion': return '🔒 Mutual Exclusion';\r\n      case 'hold-and-wait': return '⏳ Hold & Wait';\r\n      case 'circular-wait': return '🔄 Circular Wait';\r\n      case 'full-deadlock': return '☠️ Full Deadlock';\r\n      default: return null;\r\n    }\r\n  };\r\n\r\n  const formatResourceList = (resources) => {\r\n    return resources.length > 0 ? resources.join(', ') : 'None';\r\n  };\r\n\r\n  return (\r\n    <section className=\"panel process-pool\">\r\n      <h2>Process Pool</h2>\r\n      {processes.map((process, index) => (\r\n        <div key={index} className={`process process--${process.status}`} id={`process${index + 1}`}>\r\n          <div className={`process__status process__status--${getStatusColor(process.status, process.deadlockType)}`}></div>\r\n          <div className=\"process__info\">\r\n            <div className=\"process__header\">\r\n              <strong>{process.id}</strong>\r\n              <span className=\"process__name\">({process.name})</span>\r\n              {process.deadlockType && (\r\n                <span className=\"process__deadlock-type\">\r\n                  {getDeadlockTypeDisplay(process.deadlockType)}\r\n                </span>\r\n              )}\r\n            </div>\r\n            <div className=\"process__details\">\r\n              <div>Status: <span className={`status-text status-text--${process.status}`}>{process.status.toUpperCase()}</span></div>\r\n              <div>Exec Time: {process.exec}</div>\r\n              <div>Priority: {process.priority}</div>\r\n            </div>\r\n            <div className=\"process__resources\">\r\n              <div className=\"resource-line\">\r\n                <span className=\"resource-label\">Holds:</span>\r\n                <span className={`resource-list ${process.holds.length > 0 ? 'has-resources' : 'no-resources'}`}>\r\n                  {formatResourceList(process.holds)}\r\n                </span>\r\n              </div>\r\n              <div className=\"resource-line\">\r\n                <span className=\"resource-label\">Wants:</span>\r\n                <span className={`resource-list ${process.wants.length > 0 ? 'wants-resources' : 'no-wants'}`}>\r\n                  {formatResourceList(process.wants)}\r\n                </span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default ProcessPool;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}