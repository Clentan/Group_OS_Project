{"ast":null,"code":"var _jsxFileName = \"E:\\\\Group_OS_Project\\\\src\\\\pages\\\\Simulation\\\\controls\\\\ControlsStatus\\\\ControlsStatus.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './ControlsStatus.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ControlsStatus = ({\n  onResourceAllocation,\n  setCurrentPage,\n  onLogsUpdate\n}) => {\n  _s();\n  const [isRunning, setIsRunning] = useState(false);\n  const [isPaused, setIsPaused] = useState(false);\n  const [logs, setLogs] = useState([]);\n  const [allocatedResources, setAllocatedResources] = useState([]);\n  const [currentAllocationCount, setCurrentAllocationCount] = useState(0);\n  const [deadlockDetected, setDeadlockDetected] = useState(false);\n  const [deadlockDetails, setDeadlockDetails] = useState(null);\n  const [startTime, setStartTime] = useState(null);\n  const intervalRef = useRef(null);\n  const deadlockTimerRef = useRef(null);\n\n  // Available resources from ResourcePool\n  const availableResources = [{\n    name: 'DB',\n    fullName: 'Database',\n    icon: 'fas fa-database'\n  }, {\n    name: 'FILE',\n    fullName: 'File System',\n    icon: 'fas fa-file'\n  }, {\n    name: 'NET',\n    fullName: 'Network',\n    icon: 'fas fa-network-wired'\n  }, {\n    name: 'LOCK',\n    fullName: 'Lock Manager',\n    icon: 'fas fa-lock'\n  }];\n\n  // Available processes from ProcessPool\n  const availableProcesses = [{\n    id: 'P1',\n    name: 'Database Process'\n  }, {\n    id: 'P2',\n    name: 'File Handler Process'\n  }, {\n    id: 'P3',\n    name: 'Network Process'\n  }, {\n    id: 'P4',\n    name: 'System Process'\n  }];\n  const addLog = (message, type = 'info', details = null) => {\n    const timestamp = new Date().toLocaleTimeString();\n    const newLog = {\n      id: Date.now(),\n      timestamp,\n      message,\n      type,\n      details,\n      fullTimestamp: new Date().toISOString()\n    };\n    const updatedLogs = [newLog, ...logs].slice(0, 50);\n    setLogs(updatedLogs);\n\n    // Pass logs to parent component\n    if (onLogsUpdate) {\n      onLogsUpdate(updatedLogs);\n    }\n  };\n  const getRandomResource = () => {\n    const randomIndex = Math.floor(Math.random() * availableResources.length);\n    return availableResources[randomIndex];\n  };\n  const getRandomProcess = () => {\n    const randomIndex = Math.floor(Math.random() * availableProcesses.length);\n    return availableProcesses[randomIndex];\n  };\n  const detectDeadlock = newAllocations => {\n    // Simple deadlock detection algorithm\n    const processResourceMap = new Map();\n    const processWantsMap = new Map();\n\n    // Map current allocations\n    newAllocations.forEach(allocation => {\n      if (!processResourceMap.has(allocation.process.id)) {\n        processResourceMap.set(allocation.process.id, []);\n      }\n      processResourceMap.get(allocation.process.id).push(allocation.resource.name);\n    });\n\n    // Define what each process wants (simplified)\n    const processWants = {\n      'P1': ['DB', 'LOCK'],\n      'P2': ['FILE', 'NET'],\n      'P3': ['NET', 'DB'],\n      'P4': ['LOCK', 'FILE']\n    };\n\n    // Check for circular wait condition\n    for (const [processId, heldResources] of processResourceMap) {\n      const wantedResources = processWants[processId] || [];\n      for (const wantedResource of wantedResources) {\n        if (!heldResources.includes(wantedResource)) {\n          // Check if another process holds this resource\n          for (const [otherProcessId, otherHeldResources] of processResourceMap) {\n            if (otherProcessId !== processId && otherHeldResources.includes(wantedResource)) {\n              const otherWantedResources = processWants[otherProcessId] || [];\n\n              // Check if the other process wants something this process holds\n              const circularDependency = otherWantedResources.some(resource => heldResources.includes(resource));\n              if (circularDependency) {\n                return {\n                  detected: true,\n                  type: 'circular-wait',\n                  processes: [processId, otherProcessId],\n                  resources: [wantedResource, ...heldResources.filter(r => otherWantedResources.includes(r))],\n                  conditions: {\n                    mutualExclusion: true,\n                    holdAndWait: true,\n                    noPreemption: true,\n                    circularWait: true\n                  }\n                };\n              }\n            }\n          }\n        }\n      }\n    }\n    return {\n      detected: false\n    };\n  };\n  const allocateRandomResource = () => {\n    const resource = getRandomResource();\n    const process = getRandomProcess();\n\n    // Remove random deadlock trigger logic\n    // Check if another process already wants this same resource\n    const processWants = {\n      'P1': ['DB', 'LOCK'],\n      'P2': ['FILE', 'NET'],\n      'P3': ['NET', 'DB'],\n      'P4': ['LOCK', 'FILE']\n    };\n\n    // Find processes that want the same resource\n    const competingProcesses = [];\n    for (const [processId, wantedResources] of Object.entries(processWants)) {\n      if (processId !== process.id && wantedResources.includes(resource.name)) {\n        competingProcesses.push(processId);\n      }\n    }\n    const allocation = {\n      id: Date.now(),\n      resource: resource,\n      process: process,\n      timestamp: new Date().toLocaleTimeString()\n    };\n    const newAllocations = [...allocatedResources, allocation];\n    setAllocatedResources(newAllocations);\n    const newCount = currentAllocationCount + 1;\n    setCurrentAllocationCount(newCount);\n\n    // Pass allocation to parent component\n    if (onResourceAllocation) {\n      onResourceAllocation(newAllocations);\n    }\n    addLog(`🔄 Resource ${resource.name} (${resource.fullName}) allocated to ${process.name} (${process.id})`, 'allocation');\n\n    // Check for natural deadlock detection\n    const deadlockResult = detectDeadlock(newAllocations);\n    if (deadlockResult.detected) {\n      setIsRunning(false);\n      clearInterval(intervalRef.current);\n      clearTimeout(deadlockTimerRef.current);\n      setDeadlockDetected(true);\n      setDeadlockDetails(deadlockResult);\n      addLog(`☠️ NATURAL DEADLOCK DETECTED: ${deadlockResult.type} between processes ${deadlockResult.processes.join(', ')}`, 'deadlock', deadlockResult);\n      addLog('🛑 APPLICATION STOPPED: Natural deadlock detected', 'error');\n    }\n  };\n  const triggerScheduledDeadlock = () => {\n    // Stop the allocation process\n    setIsRunning(false);\n    clearInterval(intervalRef.current);\n\n    // Create a natural deadlock scenario\n    const deadlockScenario = {\n      id: Date.now(),\n      resource: {\n        name: 'DB',\n        fullName: 'Database'\n      },\n      process: {\n        id: 'P1',\n        name: 'Database Process'\n      },\n      timestamp: new Date().toLocaleTimeString()\n    };\n    const deadlockScenario2 = {\n      id: Date.now() + 1,\n      resource: {\n        name: 'LOCK',\n        fullName: 'Lock Manager'\n      },\n      process: {\n        id: 'P2',\n        name: 'File Handler Process'\n      },\n      timestamp: new Date().toLocaleTimeString()\n    };\n    const newAllocations = [...allocatedResources, deadlockScenario, deadlockScenario2];\n    setAllocatedResources(newAllocations);\n    setCurrentAllocationCount(prev => prev + 2);\n    if (onResourceAllocation) {\n      onResourceAllocation(newAllocations);\n    }\n    setDeadlockDetected(true);\n    setDeadlockDetails({\n      detected: true,\n      type: 'circular-wait',\n      processes: ['P1', 'P2'],\n      resources: ['DB', 'LOCK'],\n      conditions: {\n        mutualExclusion: true,\n        holdAndWait: true,\n        noPreemption: true,\n        circularWait: true\n      },\n      description: 'Natural deadlock occurred after 6 seconds of simulation'\n    });\n    addLog('⏰ 6 seconds elapsed - natural deadlock triggered', 'system');\n    addLog('☠️ CIRCULAR DEADLOCK: P1 holds DB and wants LOCK, P2 holds LOCK and wants DB', 'deadlock');\n    addLog('🛑 APPLICATION STOPPED: Scheduled deadlock after 6 seconds', 'error');\n    addLog('⚡ Press RESOLVE button to clear deadlock and continue', 'info');\n  };\n  const startAllocation = () => {\n    if (!isRunning && !deadlockDetected) {\n      setIsRunning(true);\n      setIsPaused(false);\n      setStartTime(Date.now());\n      addLog('🚀 Resource allocation simulation started', 'system');\n      addLog('⏰ Deadlock will occur naturally after 6 seconds', 'info');\n\n      // Set up 6-second timer for natural deadlock\n      deadlockTimerRef.current = setTimeout(() => {\n        triggerScheduledDeadlock();\n      }, 6000);\n      intervalRef.current = setInterval(() => {\n        allocateRandomResource();\n      }, 2000);\n    } else if (deadlockDetected) {\n      addLog('🚫 Cannot start: Deadlock active. Please resolve first.', 'error');\n    }\n  };\n  const pauseAllocation = () => {\n    if (isRunning && !isPaused) {\n      setIsPaused(true);\n      clearInterval(intervalRef.current);\n      clearTimeout(deadlockTimerRef.current);\n      addLog('⏸️ Resource allocation paused', 'system');\n    } else if (isPaused) {\n      setIsPaused(false);\n      addLog('▶️ Resource allocation resumed', 'system');\n\n      // Calculate remaining time for deadlock\n      const elapsed = Date.now() - startTime;\n      const remaining = Math.max(0, 6000 - elapsed);\n      if (remaining > 0) {\n        deadlockTimerRef.current = setTimeout(() => {\n          triggerScheduledDeadlock();\n        }, remaining);\n      }\n      intervalRef.current = setInterval(() => {\n        allocateRandomResource();\n      }, 2000);\n    }\n  };\n  const resetAllocation = () => {\n    setIsRunning(false);\n    setIsPaused(false);\n    setAllocatedResources([]);\n    setCurrentAllocationCount(0);\n    setDeadlockDetected(false);\n    setDeadlockDetails(null);\n    setStartTime(null);\n    setLogs([]);\n    clearInterval(intervalRef.current);\n    clearTimeout(deadlockTimerRef.current);\n    if (onResourceAllocation) {\n      onResourceAllocation([]);\n    }\n    addLog('🔄 System reset - all allocations cleared', 'system');\n  };\n  const scanForDeadlocks = () => {\n    addLog('🔍 Scanning for potential deadlocks...', 'scan');\n    setTimeout(() => {\n      const deadlockResult = detectDeadlock(allocatedResources);\n      if (deadlockResult.detected) {\n        setDeadlockDetected(true);\n        setDeadlockDetails(deadlockResult);\n        addLog('⚠️ Deadlock confirmed during manual scan', 'warning');\n      } else {\n        addLog('✅ No deadlocks detected - system running smoothly', 'success');\n      }\n    }, 1000);\n  };\n  const resolveDeadlocks = () => {\n    if (deadlockDetected) {\n      addLog('⚡ Resolving deadlock...', 'resolve');\n      setTimeout(() => {\n        // Remove conflicting allocations\n        const resolvedAllocations = allocatedResources.slice(0, -1);\n        setAllocatedResources(resolvedAllocations);\n        setDeadlockDetected(false);\n        setDeadlockDetails(null);\n        if (onResourceAllocation) {\n          onResourceAllocation(resolvedAllocations);\n        }\n        addLog('✅ Deadlock resolved - conflicting allocations removed', 'success');\n        addLog('🔄 Auto-resuming simulation...', 'info');\n\n        // Auto-resume the simulation\n        setTimeout(() => {\n          setIsRunning(true);\n          setIsPaused(false);\n          addLog('▶️ Simulation automatically resumed after deadlock resolution', 'system');\n          addLog('👀 Monitoring for new random deadlocks...', 'info');\n          intervalRef.current = setInterval(() => {\n            allocateRandomResource();\n          }, 2000);\n        }, 1000);\n      }, 1500);\n    } else {\n      addLog('ℹ️ No active deadlocks to resolve', 'info');\n    }\n  };\n  const forceLock = () => {\n    addLog('☠️ Forcing artificial deadlock scenario...', 'warning');\n    setTimeout(() => {\n      // Create a forced deadlock scenario\n      const forcedAllocations = [{\n        id: Date.now() + 1,\n        resource: {\n          name: 'DB',\n          fullName: 'Database'\n        },\n        process: {\n          id: 'P1',\n          name: 'Database Process'\n        },\n        timestamp: new Date().toLocaleTimeString()\n      }, {\n        id: Date.now() + 2,\n        resource: {\n          name: 'FILE',\n          fullName: 'File System'\n        },\n        process: {\n          id: 'P2',\n          name: 'File Handler Process'\n        },\n        timestamp: new Date().toLocaleTimeString()\n      }, {\n        id: Date.now() + 3,\n        resource: {\n          name: 'NET',\n          fullName: 'Network'\n        },\n        process: {\n          id: 'P3',\n          name: 'Network Process'\n        },\n        timestamp: new Date().toLocaleTimeString()\n      }, {\n        id: Date.now() + 4,\n        resource: {\n          name: 'LOCK',\n          fullName: 'Lock Manager'\n        },\n        process: {\n          id: 'P4',\n          name: 'System Process'\n        },\n        timestamp: new Date().toLocaleTimeString()\n      }];\n      setAllocatedResources(prev => [...prev, ...forcedAllocations]);\n      if (onResourceAllocation) {\n        onResourceAllocation([...allocatedResources, ...forcedAllocations]);\n      }\n      setDeadlockDetected(true);\n      setDeadlockDetails({\n        detected: true,\n        type: 'forced-circular-wait',\n        processes: ['P1', 'P2', 'P3', 'P4'],\n        resources: ['DB', 'FILE', 'NET', 'LOCK'],\n        conditions: {\n          mutualExclusion: true,\n          holdAndWait: true,\n          noPreemption: true,\n          circularWait: true\n        }\n      });\n      addLog('🔒 Artificial deadlock created - all processes in circular wait', 'error');\n    }, 1000);\n  };\n  const openLogsExplorer = () => {\n    if (setCurrentPage) {\n      setCurrentPage('Logs Explorer');\n    }\n  };\n  const buttons = [{\n    label: '▶ Start',\n    className: 'controls__btn--start',\n    onClick: startAllocation,\n    disabled: isRunning && !isPaused || deadlockDetected\n  }, {\n    label: '⏸ Pause',\n    className: 'controls__btn--pause',\n    onClick: pauseAllocation,\n    disabled: !isRunning || deadlockDetected\n  }, {\n    label: '⟲ Reset',\n    className: 'controls__btn--reset',\n    onClick: resetAllocation\n  }, {\n    label: '🔍 Scan',\n    className: 'controls__btn--scan',\n    onClick: scanForDeadlocks\n  }, {\n    label: '⚡ Resolve',\n    className: 'controls__btn--resolve',\n    onClick: resolveDeadlocks,\n    disabled: !deadlockDetected\n  }, {\n    label: '☠ Force Lock',\n    className: 'controls__btn--force',\n    onClick: forceLock\n  }];\n  useEffect(() => {\n    return () => {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n      if (deadlockTimerRef.current) {\n        clearTimeout(deadlockTimerRef.current);\n      }\n    };\n  }, []);\n  const getStatusText = () => {\n    if (deadlockDetected) return 'Deadlocked';\n    if (isRunning && isPaused) return 'Paused';\n    if (isRunning) return 'Running';\n    return 'Stopped';\n  };\n  const getStatusClass = () => {\n    if (deadlockDetected) return 'status--deadlocked';\n    if (isRunning && isPaused) return 'status--paused';\n    if (isRunning) return 'status--running';\n    return 'status--stopped';\n  };\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"panel controls-status\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: buttons.map((button, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `controls__btn ${button.className}`,\n        onClick: button.onClick,\n        disabled: button.disabled,\n        children: button.label\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 416,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 414,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"system-status\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"system-status__title\",\n        children: \"System Status\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 428,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status-overview\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: `status-indicator ${getStatusClass()}`,\n          children: [\"Status: \", getStatusText()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 431,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"allocation-counter\",\n          children: [\"Resources Allocated: \", currentAllocationCount]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 434,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"active-processes\",\n          children: [\"Active Processes: \", availableProcesses.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 437,\n          columnNumber: 11\n        }, this), deadlockDetected && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"deadlock-alert\",\n          children: \"\\u26A0\\uFE0F DEADLOCK ACTIVE\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 441,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 430,\n        columnNumber: 9\n      }, this), deadlockDetected && deadlockDetails && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"deadlock-details\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"\\uD83D\\uDEA8 Deadlock Analysis:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 449,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"deadlock-info\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Type:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 451,\n              columnNumber: 20\n            }, this), \" \", deadlockDetails.type]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 451,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Affected Processes:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 452,\n              columnNumber: 20\n            }, this), \" \", deadlockDetails.processes.join(', ')]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 452,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Involved Resources:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 453,\n              columnNumber: 20\n            }, this), \" \", deadlockDetails.resources.join(', ')]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 453,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"deadlock-conditions\",\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Conditions Met:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 455,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: [/*#__PURE__*/_jsxDEV(\"li\", {\n                children: [\"\\uD83D\\uDD12 Mutual Exclusion: \", deadlockDetails.conditions.mutualExclusion ? '✓' : '✗']\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 457,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                children: [\"\\u23F3 Hold and Wait: \", deadlockDetails.conditions.holdAndWait ? '✓' : '✗']\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 458,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                children: [\"\\uD83D\\uDEAB No Preemption: \", deadlockDetails.conditions.noPreemption ? '✓' : '✗']\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 459,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                children: [\"\\uD83D\\uDD04 Circular Wait: \", deadlockDetails.conditions.circularWait ? '✓' : '✗']\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 460,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 456,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 454,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 450,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 448,\n        columnNumber: 11\n      }, this), allocatedResources.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"recent-allocations\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Recent Allocations:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 469,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"allocation-list\",\n          children: allocatedResources.slice(-3).reverse().map(allocation => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"allocation-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"allocation-resource\",\n              children: allocation.resource.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 473,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"allocation-arrow\",\n              children: \"\\u2192\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 474,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"allocation-process\",\n              children: allocation.process.id\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 475,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"allocation-time\",\n              children: allocation.timestamp\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 476,\n              columnNumber: 19\n            }, this)]\n          }, allocation.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 472,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 470,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 468,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"system-logs\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"logs-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"System Logs:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 485,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"explore-logs-btn\",\n            onClick: openLogsExplorer,\n            children: \"\\uD83D\\uDCCB Explore All Logs\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 486,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 484,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"logs-container\",\n          children: logs.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"log-entry log--info\",\n            children: \"[System] Ready for random resource allocation...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 492,\n            columnNumber: 15\n          }, this) : logs.slice(0, 10).map(log => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `log-entry log--${log.type}`,\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"log-timestamp\",\n              children: [\"[\", log.timestamp, \"]\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 498,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"log-message\",\n              children: log.message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 499,\n              columnNumber: 19\n            }, this)]\n          }, log.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 497,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 490,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 483,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 427,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 413,\n    columnNumber: 5\n  }, this);\n};\n_s(ControlsStatus, \"NxacXOnrjUrCjH3Dvv8oxUM06sA=\");\n_c = ControlsStatus;\nexport default ControlsStatus;\nvar _c;\n$RefreshReg$(_c, \"ControlsStatus\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","ControlsStatus","onResourceAllocation","setCurrentPage","onLogsUpdate","_s","isRunning","setIsRunning","isPaused","setIsPaused","logs","setLogs","allocatedResources","setAllocatedResources","currentAllocationCount","setCurrentAllocationCount","deadlockDetected","setDeadlockDetected","deadlockDetails","setDeadlockDetails","startTime","setStartTime","intervalRef","deadlockTimerRef","availableResources","name","fullName","icon","availableProcesses","id","addLog","message","type","details","timestamp","Date","toLocaleTimeString","newLog","now","fullTimestamp","toISOString","updatedLogs","slice","getRandomResource","randomIndex","Math","floor","random","length","getRandomProcess","detectDeadlock","newAllocations","processResourceMap","Map","processWantsMap","forEach","allocation","has","process","set","get","push","resource","processWants","processId","heldResources","wantedResources","wantedResource","includes","otherProcessId","otherHeldResources","otherWantedResources","circularDependency","some","detected","processes","resources","filter","r","conditions","mutualExclusion","holdAndWait","noPreemption","circularWait","allocateRandomResource","competingProcesses","Object","entries","newCount","deadlockResult","clearInterval","current","clearTimeout","join","triggerScheduledDeadlock","deadlockScenario","deadlockScenario2","prev","description","startAllocation","setTimeout","setInterval","pauseAllocation","elapsed","remaining","max","resetAllocation","scanForDeadlocks","resolveDeadlocks","resolvedAllocations","forceLock","forcedAllocations","openLogsExplorer","buttons","label","className","onClick","disabled","getStatusText","getStatusClass","children","map","button","index","fileName","_jsxFileName","lineNumber","columnNumber","reverse","log","_c","$RefreshReg$"],"sources":["E:/Group_OS_Project/src/pages/Simulation/controls/ControlsStatus/ControlsStatus.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport './ControlsStatus.css';\r\n\r\nconst ControlsStatus = ({ onResourceAllocation, setCurrentPage, onLogsUpdate }) => {\r\n  const [isRunning, setIsRunning] = useState(false);\r\n  const [isPaused, setIsPaused] = useState(false);\r\n  const [logs, setLogs] = useState([]);\r\n  const [allocatedResources, setAllocatedResources] = useState([]);\r\n  const [currentAllocationCount, setCurrentAllocationCount] = useState(0);\r\n  const [deadlockDetected, setDeadlockDetected] = useState(false);\r\n  const [deadlockDetails, setDeadlockDetails] = useState(null);\r\n  const [startTime, setStartTime] = useState(null);\r\n  const intervalRef = useRef(null);\r\n  const deadlockTimerRef = useRef(null);\r\n\r\n  // Available resources from ResourcePool\r\n  const availableResources = [\r\n    { name: 'DB', fullName: 'Database', icon: 'fas fa-database' },\r\n    { name: 'FILE', fullName: 'File System', icon: 'fas fa-file' },\r\n    { name: 'NET', fullName: 'Network', icon: 'fas fa-network-wired' },\r\n    { name: 'LOCK', fullName: 'Lock Manager', icon: 'fas fa-lock' }\r\n  ];\r\n\r\n  // Available processes from ProcessPool\r\n  const availableProcesses = [\r\n    { id: 'P1', name: 'Database Process' },\r\n    { id: 'P2', name: 'File Handler Process' },\r\n    { id: 'P3', name: 'Network Process' },\r\n    { id: 'P4', name: 'System Process' }\r\n  ];\r\n\r\n  const addLog = (message, type = 'info', details = null) => {\r\n    const timestamp = new Date().toLocaleTimeString();\r\n    const newLog = {\r\n      id: Date.now(),\r\n      timestamp,\r\n      message,\r\n      type,\r\n      details,\r\n      fullTimestamp: new Date().toISOString()\r\n    };\r\n    const updatedLogs = [newLog, ...logs].slice(0, 50);\r\n    setLogs(updatedLogs);\r\n    \r\n    // Pass logs to parent component\r\n    if (onLogsUpdate) {\r\n      onLogsUpdate(updatedLogs);\r\n    }\r\n  };\r\n\r\n  const getRandomResource = () => {\r\n    const randomIndex = Math.floor(Math.random() * availableResources.length);\r\n    return availableResources[randomIndex];\r\n  };\r\n\r\n  const getRandomProcess = () => {\r\n    const randomIndex = Math.floor(Math.random() * availableProcesses.length);\r\n    return availableProcesses[randomIndex];\r\n  };\r\n\r\n  const detectDeadlock = (newAllocations) => {\r\n    // Simple deadlock detection algorithm\r\n    const processResourceMap = new Map();\r\n    const processWantsMap = new Map();\r\n    \r\n    // Map current allocations\r\n    newAllocations.forEach(allocation => {\r\n      if (!processResourceMap.has(allocation.process.id)) {\r\n        processResourceMap.set(allocation.process.id, []);\r\n      }\r\n      processResourceMap.get(allocation.process.id).push(allocation.resource.name);\r\n    });\r\n    \r\n    // Define what each process wants (simplified)\r\n    const processWants = {\r\n      'P1': ['DB', 'LOCK'],\r\n      'P2': ['FILE', 'NET'],\r\n      'P3': ['NET', 'DB'],\r\n      'P4': ['LOCK', 'FILE']\r\n    };\r\n    \r\n    // Check for circular wait condition\r\n    for (const [processId, heldResources] of processResourceMap) {\r\n      const wantedResources = processWants[processId] || [];\r\n      \r\n      for (const wantedResource of wantedResources) {\r\n        if (!heldResources.includes(wantedResource)) {\r\n          // Check if another process holds this resource\r\n          for (const [otherProcessId, otherHeldResources] of processResourceMap) {\r\n            if (otherProcessId !== processId && otherHeldResources.includes(wantedResource)) {\r\n              const otherWantedResources = processWants[otherProcessId] || [];\r\n              \r\n              // Check if the other process wants something this process holds\r\n              const circularDependency = otherWantedResources.some(resource => \r\n                heldResources.includes(resource)\r\n              );\r\n              \r\n              if (circularDependency) {\r\n                return {\r\n                  detected: true,\r\n                  type: 'circular-wait',\r\n                  processes: [processId, otherProcessId],\r\n                  resources: [wantedResource, ...heldResources.filter(r => otherWantedResources.includes(r))],\r\n                  conditions: {\r\n                    mutualExclusion: true,\r\n                    holdAndWait: true,\r\n                    noPreemption: true,\r\n                    circularWait: true\r\n                  }\r\n                };\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    return { detected: false };\r\n  };\r\n\r\n  const allocateRandomResource = () => {\r\n    const resource = getRandomResource();\r\n    const process = getRandomProcess();\r\n    \r\n    // Remove random deadlock trigger logic\r\n    // Check if another process already wants this same resource\r\n    const processWants = {\r\n      'P1': ['DB', 'LOCK'],\r\n      'P2': ['FILE', 'NET'],\r\n      'P3': ['NET', 'DB'],\r\n      'P4': ['LOCK', 'FILE']\r\n    };\r\n    \r\n    // Find processes that want the same resource\r\n    const competingProcesses = [];\r\n    for (const [processId, wantedResources] of Object.entries(processWants)) {\r\n      if (processId !== process.id && wantedResources.includes(resource.name)) {\r\n        competingProcesses.push(processId);\r\n      }\r\n    }\r\n    \r\n    const allocation = {\r\n      id: Date.now(),\r\n      resource: resource,\r\n      process: process,\r\n      timestamp: new Date().toLocaleTimeString()\r\n    };\r\n\r\n    const newAllocations = [...allocatedResources, allocation];\r\n    setAllocatedResources(newAllocations);\r\n    const newCount = currentAllocationCount + 1;\r\n    setCurrentAllocationCount(newCount);\r\n    \r\n    // Pass allocation to parent component\r\n    if (onResourceAllocation) {\r\n      onResourceAllocation(newAllocations);\r\n    }\r\n    \r\n    addLog(`🔄 Resource ${resource.name} (${resource.fullName}) allocated to ${process.name} (${process.id})`, 'allocation');\r\n    \r\n    // Check for natural deadlock detection\r\n    const deadlockResult = detectDeadlock(newAllocations);\r\n    if (deadlockResult.detected) {\r\n      setIsRunning(false);\r\n      clearInterval(intervalRef.current);\r\n      clearTimeout(deadlockTimerRef.current);\r\n      setDeadlockDetected(true);\r\n      setDeadlockDetails(deadlockResult);\r\n      addLog(\r\n        `☠️ NATURAL DEADLOCK DETECTED: ${deadlockResult.type} between processes ${deadlockResult.processes.join(', ')}`,\r\n        'deadlock',\r\n        deadlockResult\r\n      );\r\n      addLog('🛑 APPLICATION STOPPED: Natural deadlock detected', 'error');\r\n    }\r\n  };\r\n\r\n  const triggerScheduledDeadlock = () => {\r\n    // Stop the allocation process\r\n    setIsRunning(false);\r\n    clearInterval(intervalRef.current);\r\n    \r\n    // Create a natural deadlock scenario\r\n    const deadlockScenario = {\r\n      id: Date.now(),\r\n      resource: { name: 'DB', fullName: 'Database' },\r\n      process: { id: 'P1', name: 'Database Process' },\r\n      timestamp: new Date().toLocaleTimeString()\r\n    };\r\n    \r\n    const deadlockScenario2 = {\r\n      id: Date.now() + 1,\r\n      resource: { name: 'LOCK', fullName: 'Lock Manager' },\r\n      process: { id: 'P2', name: 'File Handler Process' },\r\n      timestamp: new Date().toLocaleTimeString()\r\n    };\r\n    \r\n    const newAllocations = [...allocatedResources, deadlockScenario, deadlockScenario2];\r\n    setAllocatedResources(newAllocations);\r\n    setCurrentAllocationCount(prev => prev + 2);\r\n    \r\n    if (onResourceAllocation) {\r\n      onResourceAllocation(newAllocations);\r\n    }\r\n    \r\n    setDeadlockDetected(true);\r\n    setDeadlockDetails({\r\n      detected: true,\r\n      type: 'circular-wait',\r\n      processes: ['P1', 'P2'],\r\n      resources: ['DB', 'LOCK'],\r\n      conditions: {\r\n        mutualExclusion: true,\r\n        holdAndWait: true,\r\n        noPreemption: true,\r\n        circularWait: true\r\n      },\r\n      description: 'Natural deadlock occurred after 6 seconds of simulation'\r\n    });\r\n    \r\n    addLog('⏰ 6 seconds elapsed - natural deadlock triggered', 'system');\r\n    addLog('☠️ CIRCULAR DEADLOCK: P1 holds DB and wants LOCK, P2 holds LOCK and wants DB', 'deadlock');\r\n    addLog('🛑 APPLICATION STOPPED: Scheduled deadlock after 6 seconds', 'error');\r\n    addLog('⚡ Press RESOLVE button to clear deadlock and continue', 'info');\r\n  };\r\n\r\n  const startAllocation = () => {\r\n    if (!isRunning && !deadlockDetected) {\r\n      setIsRunning(true);\r\n      setIsPaused(false);\r\n      setStartTime(Date.now());\r\n      addLog('🚀 Resource allocation simulation started', 'system');\r\n      addLog('⏰ Deadlock will occur naturally after 6 seconds', 'info');\r\n      \r\n      // Set up 6-second timer for natural deadlock\r\n      deadlockTimerRef.current = setTimeout(() => {\r\n        triggerScheduledDeadlock();\r\n      }, 6000);\r\n      \r\n      intervalRef.current = setInterval(() => {\r\n        allocateRandomResource();\r\n      }, 2000);\r\n    } else if (deadlockDetected) {\r\n      addLog('🚫 Cannot start: Deadlock active. Please resolve first.', 'error');\r\n    }\r\n  };\r\n\r\n  const pauseAllocation = () => {\r\n    if (isRunning && !isPaused) {\r\n      setIsPaused(true);\r\n      clearInterval(intervalRef.current);\r\n      clearTimeout(deadlockTimerRef.current);\r\n      addLog('⏸️ Resource allocation paused', 'system');\r\n    } else if (isPaused) {\r\n      setIsPaused(false);\r\n      addLog('▶️ Resource allocation resumed', 'system');\r\n      \r\n      // Calculate remaining time for deadlock\r\n      const elapsed = Date.now() - startTime;\r\n      const remaining = Math.max(0, 6000 - elapsed);\r\n      \r\n      if (remaining > 0) {\r\n        deadlockTimerRef.current = setTimeout(() => {\r\n          triggerScheduledDeadlock();\r\n        }, remaining);\r\n      }\r\n      \r\n      intervalRef.current = setInterval(() => {\r\n        allocateRandomResource();\r\n      }, 2000);\r\n    }\r\n  };\r\n\r\n  const resetAllocation = () => {\r\n    setIsRunning(false);\r\n    setIsPaused(false);\r\n    setAllocatedResources([]);\r\n    setCurrentAllocationCount(0);\r\n    setDeadlockDetected(false);\r\n    setDeadlockDetails(null);\r\n    setStartTime(null);\r\n    setLogs([]);\r\n    clearInterval(intervalRef.current);\r\n    clearTimeout(deadlockTimerRef.current);\r\n    if (onResourceAllocation) {\r\n      onResourceAllocation([]);\r\n    }\r\n    addLog('🔄 System reset - all allocations cleared', 'system');\r\n  };\r\n\r\n  const scanForDeadlocks = () => {\r\n    addLog('🔍 Scanning for potential deadlocks...', 'scan');\r\n    setTimeout(() => {\r\n      const deadlockResult = detectDeadlock(allocatedResources);\r\n      if (deadlockResult.detected) {\r\n        setDeadlockDetected(true);\r\n        setDeadlockDetails(deadlockResult);\r\n        addLog('⚠️ Deadlock confirmed during manual scan', 'warning');\r\n      } else {\r\n        addLog('✅ No deadlocks detected - system running smoothly', 'success');\r\n      }\r\n    }, 1000);\r\n  };\r\n\r\n  const resolveDeadlocks = () => {\r\n    if (deadlockDetected) {\r\n      addLog('⚡ Resolving deadlock...', 'resolve');\r\n      setTimeout(() => {\r\n        // Remove conflicting allocations\r\n        const resolvedAllocations = allocatedResources.slice(0, -1);\r\n        setAllocatedResources(resolvedAllocations);\r\n        setDeadlockDetected(false);\r\n        setDeadlockDetails(null);\r\n        if (onResourceAllocation) {\r\n          onResourceAllocation(resolvedAllocations);\r\n        }\r\n        addLog('✅ Deadlock resolved - conflicting allocations removed', 'success');\r\n        addLog('🔄 Auto-resuming simulation...', 'info');\r\n        \r\n        // Auto-resume the simulation\r\n        setTimeout(() => {\r\n          setIsRunning(true);\r\n          setIsPaused(false);\r\n          addLog('▶️ Simulation automatically resumed after deadlock resolution', 'system');\r\n          addLog('👀 Monitoring for new random deadlocks...', 'info');\r\n          \r\n          intervalRef.current = setInterval(() => {\r\n            allocateRandomResource();\r\n          }, 2000);\r\n        }, 1000);\r\n        \r\n      }, 1500);\r\n    } else {\r\n      addLog('ℹ️ No active deadlocks to resolve', 'info');\r\n    }\r\n  };\r\n\r\n  const forceLock = () => {\r\n    addLog('☠️ Forcing artificial deadlock scenario...', 'warning');\r\n    setTimeout(() => {\r\n      // Create a forced deadlock scenario\r\n      const forcedAllocations = [\r\n        { id: Date.now() + 1, resource: { name: 'DB', fullName: 'Database' }, process: { id: 'P1', name: 'Database Process' }, timestamp: new Date().toLocaleTimeString() },\r\n        { id: Date.now() + 2, resource: { name: 'FILE', fullName: 'File System' }, process: { id: 'P2', name: 'File Handler Process' }, timestamp: new Date().toLocaleTimeString() },\r\n        { id: Date.now() + 3, resource: { name: 'NET', fullName: 'Network' }, process: { id: 'P3', name: 'Network Process' }, timestamp: new Date().toLocaleTimeString() },\r\n        { id: Date.now() + 4, resource: { name: 'LOCK', fullName: 'Lock Manager' }, process: { id: 'P4', name: 'System Process' }, timestamp: new Date().toLocaleTimeString() }\r\n      ];\r\n      \r\n      setAllocatedResources(prev => [...prev, ...forcedAllocations]);\r\n      if (onResourceAllocation) {\r\n        onResourceAllocation([...allocatedResources, ...forcedAllocations]);\r\n      }\r\n      \r\n      setDeadlockDetected(true);\r\n      setDeadlockDetails({\r\n        detected: true,\r\n        type: 'forced-circular-wait',\r\n        processes: ['P1', 'P2', 'P3', 'P4'],\r\n        resources: ['DB', 'FILE', 'NET', 'LOCK'],\r\n        conditions: {\r\n          mutualExclusion: true,\r\n          holdAndWait: true,\r\n          noPreemption: true,\r\n          circularWait: true\r\n        }\r\n      });\r\n      \r\n      addLog('🔒 Artificial deadlock created - all processes in circular wait', 'error');\r\n    }, 1000);\r\n  };\r\n\r\n  const openLogsExplorer = () => {\r\n    if (setCurrentPage) {\r\n      setCurrentPage('Logs Explorer');\r\n    }\r\n  };\r\n\r\n  const buttons = [\r\n    { label: '▶ Start', className: 'controls__btn--start', onClick: startAllocation, disabled: (isRunning && !isPaused) || deadlockDetected },\r\n    { label: '⏸ Pause', className: 'controls__btn--pause', onClick: pauseAllocation, disabled: !isRunning || deadlockDetected },\r\n    { label: '⟲ Reset', className: 'controls__btn--reset', onClick: resetAllocation },\r\n    { label: '🔍 Scan', className: 'controls__btn--scan', onClick: scanForDeadlocks },\r\n    { label: '⚡ Resolve', className: 'controls__btn--resolve', onClick: resolveDeadlocks, disabled: !deadlockDetected },\r\n    { label: '☠ Force Lock', className: 'controls__btn--force', onClick: forceLock },\r\n  ];\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      if (intervalRef.current) {\r\n        clearInterval(intervalRef.current);\r\n      }\r\n      if (deadlockTimerRef.current) {\r\n        clearTimeout(deadlockTimerRef.current);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  const getStatusText = () => {\r\n    if (deadlockDetected) return 'Deadlocked';\r\n    if (isRunning && isPaused) return 'Paused';\r\n    if (isRunning) return 'Running';\r\n    return 'Stopped';\r\n  };\r\n\r\n  const getStatusClass = () => {\r\n    if (deadlockDetected) return 'status--deadlocked';\r\n    if (isRunning && isPaused) return 'status--paused';\r\n    if (isRunning) return 'status--running';\r\n    return 'status--stopped';\r\n  };\r\n\r\n  return (\r\n    <section className=\"panel controls-status\">\r\n      <div className=\"controls\">\r\n        {buttons.map((button, index) => (\r\n          <button \r\n            key={index} \r\n            className={`controls__btn ${button.className}`}\r\n            onClick={button.onClick}\r\n            disabled={button.disabled}\r\n          >\r\n            {button.label}\r\n          </button>\r\n        ))}\r\n      </div>\r\n      \r\n      <div className=\"system-status\">\r\n        <h3 className=\"system-status__title\">System Status</h3>\r\n        \r\n        <div className=\"status-overview\">\r\n          <div className={`status-indicator ${getStatusClass()}`}>\r\n            Status: {getStatusText()}\r\n          </div>\r\n          <div className=\"allocation-counter\">\r\n            Resources Allocated: {currentAllocationCount}\r\n          </div>\r\n          <div className=\"active-processes\">\r\n            Active Processes: {availableProcesses.length}\r\n          </div>\r\n          {deadlockDetected && (\r\n            <div className=\"deadlock-alert\">\r\n              ⚠️ DEADLOCK ACTIVE\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        {deadlockDetected && deadlockDetails && (\r\n          <div className=\"deadlock-details\">\r\n            <h4>🚨 Deadlock Analysis:</h4>\r\n            <div className=\"deadlock-info\">\r\n              <div><strong>Type:</strong> {deadlockDetails.type}</div>\r\n              <div><strong>Affected Processes:</strong> {deadlockDetails.processes.join(', ')}</div>\r\n              <div><strong>Involved Resources:</strong> {deadlockDetails.resources.join(', ')}</div>\r\n              <div className=\"deadlock-conditions\">\r\n                <strong>Conditions Met:</strong>\r\n                <ul>\r\n                  <li>🔒 Mutual Exclusion: {deadlockDetails.conditions.mutualExclusion ? '✓' : '✗'}</li>\r\n                  <li>⏳ Hold and Wait: {deadlockDetails.conditions.holdAndWait ? '✓' : '✗'}</li>\r\n                  <li>🚫 No Preemption: {deadlockDetails.conditions.noPreemption ? '✓' : '✗'}</li>\r\n                  <li>🔄 Circular Wait: {deadlockDetails.conditions.circularWait ? '✓' : '✗'}</li>\r\n                </ul>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {allocatedResources.length > 0 && (\r\n          <div className=\"recent-allocations\">\r\n            <h4>Recent Allocations:</h4>\r\n            <div className=\"allocation-list\">\r\n              {allocatedResources.slice(-3).reverse().map((allocation) => (\r\n                <div key={allocation.id} className=\"allocation-item\">\r\n                  <span className=\"allocation-resource\">{allocation.resource.name}</span>\r\n                  <span className=\"allocation-arrow\">→</span>\r\n                  <span className=\"allocation-process\">{allocation.process.id}</span>\r\n                  <span className=\"allocation-time\">{allocation.timestamp}</span>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        <div className=\"system-logs\">\r\n          <div className=\"logs-header\">\r\n            <h4>System Logs:</h4>\r\n            <button className=\"explore-logs-btn\" onClick={openLogsExplorer}>\r\n              📋 Explore All Logs\r\n            </button>\r\n          </div>\r\n          <div className=\"logs-container\">\r\n            {logs.length === 0 ? (\r\n              <div className=\"log-entry log--info\">\r\n                [System] Ready for random resource allocation...\r\n              </div>\r\n            ) : (\r\n              logs.slice(0, 10).map((log) => (\r\n                <div key={log.id} className={`log-entry log--${log.type}`}>\r\n                  <span className=\"log-timestamp\">[{log.timestamp}]</span>\r\n                  <span className=\"log-message\">{log.message}</span>\r\n                </div>\r\n              ))\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default ControlsStatus;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}