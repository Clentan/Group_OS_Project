{"ast":null,"code":"var _jsxFileName = \"E:\\\\Group_OS_Project\\\\src\\\\pages\\\\Simulation\\\\controls\\\\ControlsStatus\\\\ControlsStatus.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './ControlsStatus.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ControlsStatus = () => {\n  _s();\n  const [isRunning, setIsRunning] = useState(false);\n  const [isPaused, setIsPaused] = useState(false);\n  const [logs, setLogs] = useState([]);\n  const [allocatedResources, setAllocatedResources] = useState([]);\n  const [currentAllocationCount, setCurrentAllocationCount] = useState(0);\n  const intervalRef = useRef(null);\n\n  // Available resources from ResourcePool\n  const availableResources = [{\n    name: 'DB',\n    fullName: 'Database',\n    icon: 'fas fa-database'\n  }, {\n    name: 'FILE',\n    fullName: 'File System',\n    icon: 'fas fa-file'\n  }, {\n    name: 'NET',\n    fullName: 'Network',\n    icon: 'fas fa-network-wired'\n  }, {\n    name: 'LOCK',\n    fullName: 'Lock Manager',\n    icon: 'fas fa-lock'\n  }];\n\n  // Available processes from ProcessPool\n  const availableProcesses = [{\n    id: 'P1',\n    name: 'Database Process'\n  }, {\n    id: 'P2',\n    name: 'File Handler Process'\n  }, {\n    id: 'P3',\n    name: 'Network Process'\n  }, {\n    id: 'P4',\n    name: 'System Process'\n  }];\n  const addLog = (message, type = 'info') => {\n    const timestamp = new Date().toLocaleTimeString();\n    const newLog = {\n      id: Date.now(),\n      timestamp,\n      message,\n      type\n    };\n    setLogs(prev => [newLog, ...prev].slice(0, 20)); // Keep only last 20 logs\n  };\n  const getRandomResource = () => {\n    const randomIndex = Math.floor(Math.random() * availableResources.length);\n    return availableResources[randomIndex];\n  };\n  const getRandomProcess = () => {\n    const randomIndex = Math.floor(Math.random() * availableProcesses.length);\n    return availableProcesses[randomIndex];\n  };\n  const allocateRandomResource = () => {\n    const resource = getRandomResource();\n    const process = getRandomProcess();\n    const allocation = {\n      id: Date.now(),\n      resource: resource,\n      process: process,\n      timestamp: new Date().toLocaleTimeString()\n    };\n    setAllocatedResources(prev => [...prev, allocation]);\n    setCurrentAllocationCount(prev => prev + 1);\n    addLog(`🔄 Resource ${resource.name} (${resource.fullName}) randomly allocated to ${process.name} (${process.id})`, 'allocation');\n  };\n  const startAllocation = () => {\n    if (!isRunning) {\n      setIsRunning(true);\n      setIsPaused(false);\n      addLog('🚀 Random resource allocation simulation started', 'system');\n      intervalRef.current = setInterval(() => {\n        allocateRandomResource();\n      }, 2000); // Allocate every 2 seconds\n    }\n  };\n  const pauseAllocation = () => {\n    if (isRunning && !isPaused) {\n      setIsPaused(true);\n      clearInterval(intervalRef.current);\n      addLog('⏸️ Resource allocation paused', 'system');\n    } else if (isPaused) {\n      setIsPaused(false);\n      addLog('▶️ Resource allocation resumed', 'system');\n      intervalRef.current = setInterval(() => {\n        allocateRandomResource();\n      }, 2000);\n    }\n  };\n  const resetAllocation = () => {\n    setIsRunning(false);\n    setIsPaused(false);\n    setAllocatedResources([]);\n    setCurrentAllocationCount(0);\n    setLogs([]);\n    clearInterval(intervalRef.current);\n    addLog('🔄 System reset - all allocations cleared', 'system');\n  };\n  const scanForDeadlocks = () => {\n    addLog('🔍 Scanning for potential deadlocks...', 'scan');\n    setTimeout(() => {\n      const hasDeadlock = Math.random() > 0.7; // 30% chance of detecting deadlock\n      if (hasDeadlock) {\n        addLog('⚠️ Potential deadlock detected in resource allocation', 'warning');\n      } else {\n        addLog('✅ No deadlocks detected - system running smoothly', 'success');\n      }\n    }, 1000);\n  };\n  const resolveDeadlocks = () => {\n    addLog('⚡ Attempting to resolve deadlocks...', 'resolve');\n    setTimeout(() => {\n      addLog('✅ Deadlock resolution completed successfully', 'success');\n    }, 1500);\n  };\n  const forceLock = () => {\n    addLog('☠️ Forcing artificial deadlock scenario...', 'warning');\n    setTimeout(() => {\n      addLog('🔒 Artificial deadlock created for testing purposes', 'error');\n    }, 1000);\n  };\n  const buttons = [{\n    label: '▶ Start',\n    className: 'controls__btn--start',\n    onClick: startAllocation,\n    disabled: isRunning && !isPaused\n  }, {\n    label: '⏸ Pause',\n    className: 'controls__btn--pause',\n    onClick: pauseAllocation,\n    disabled: !isRunning\n  }, {\n    label: '⟲ Reset',\n    className: 'controls__btn--reset',\n    onClick: resetAllocation\n  }, {\n    label: '🔍 Scan',\n    className: 'controls__btn--scan',\n    onClick: scanForDeadlocks\n  }, {\n    label: '⚡ Resolve',\n    className: 'controls__btn--resolve',\n    onClick: resolveDeadlocks\n  }, {\n    label: '☠ Force Lock',\n    className: 'controls__btn--force',\n    onClick: forceLock\n  }];\n  useEffect(() => {\n    return () => {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    };\n  }, []);\n  const getStatusText = () => {\n    if (isRunning && isPaused) return 'Paused';\n    if (isRunning) return 'Running';\n    return 'Stopped';\n  };\n  const getStatusClass = () => {\n    if (isRunning && isPaused) return 'status--paused';\n    if (isRunning) return 'status--running';\n    return 'status--stopped';\n  };\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"panel controls-status\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: buttons.map((button, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `controls__btn ${button.className}`,\n        onClick: button.onClick,\n        disabled: button.disabled,\n        children: button.label\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"system-status\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"system-status__title\",\n        children: \"System Status\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status-overview\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: `status-indicator ${getStatusClass()}`,\n          children: [\"Status: \", getStatusText()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"allocation-counter\",\n          children: [\"Resources Allocated: \", currentAllocationCount]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"active-processes\",\n          children: [\"Active Processes: \", availableProcesses.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this), allocatedResources.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"recent-allocations\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Recent Allocations:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"allocation-list\",\n          children: allocatedResources.slice(-3).reverse().map(allocation => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"allocation-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"allocation-resource\",\n              children: allocation.resource.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 193,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"allocation-arrow\",\n              children: \"\\u2192\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 194,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"allocation-process\",\n              children: allocation.process.id\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 195,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"allocation-time\",\n              children: allocation.timestamp\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 196,\n              columnNumber: 19\n            }, this)]\n          }, allocation.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"system-logs\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"System Logs:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"logs-container\",\n          children: logs.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"log-entry log--info\",\n            children: \"[System] Ready for random resource allocation...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 15\n          }, this) : logs.map(log => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `log-entry log--${log.type}`,\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"log-timestamp\",\n              children: [\"[\", log.timestamp, \"]\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"log-message\",\n              children: log.message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 214,\n              columnNumber: 19\n            }, this)]\n          }, log.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 158,\n    columnNumber: 5\n  }, this);\n};\n_s(ControlsStatus, \"J7zkBigdHDN+BQ8sQHoi/1stOnY=\");\n_c = ControlsStatus;\nexport default ControlsStatus;\nvar _c;\n$RefreshReg$(_c, \"ControlsStatus\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","ControlsStatus","_s","isRunning","setIsRunning","isPaused","setIsPaused","logs","setLogs","allocatedResources","setAllocatedResources","currentAllocationCount","setCurrentAllocationCount","intervalRef","availableResources","name","fullName","icon","availableProcesses","id","addLog","message","type","timestamp","Date","toLocaleTimeString","newLog","now","prev","slice","getRandomResource","randomIndex","Math","floor","random","length","getRandomProcess","allocateRandomResource","resource","process","allocation","startAllocation","current","setInterval","pauseAllocation","clearInterval","resetAllocation","scanForDeadlocks","setTimeout","hasDeadlock","resolveDeadlocks","forceLock","buttons","label","className","onClick","disabled","getStatusText","getStatusClass","children","map","button","index","fileName","_jsxFileName","lineNumber","columnNumber","reverse","log","_c","$RefreshReg$"],"sources":["E:/Group_OS_Project/src/pages/Simulation/controls/ControlsStatus/ControlsStatus.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport './ControlsStatus.css';\r\n\r\nconst ControlsStatus = () => {\r\n  const [isRunning, setIsRunning] = useState(false);\r\n  const [isPaused, setIsPaused] = useState(false);\r\n  const [logs, setLogs] = useState([]);\r\n  const [allocatedResources, setAllocatedResources] = useState([]);\r\n  const [currentAllocationCount, setCurrentAllocationCount] = useState(0);\r\n  const intervalRef = useRef(null);\r\n\r\n  // Available resources from ResourcePool\r\n  const availableResources = [\r\n    { name: 'DB', fullName: 'Database', icon: 'fas fa-database' },\r\n    { name: 'FILE', fullName: 'File System', icon: 'fas fa-file' },\r\n    { name: 'NET', fullName: 'Network', icon: 'fas fa-network-wired' },\r\n    { name: 'LOCK', fullName: 'Lock Manager', icon: 'fas fa-lock' }\r\n  ];\r\n\r\n  // Available processes from ProcessPool\r\n  const availableProcesses = [\r\n    { id: 'P1', name: 'Database Process' },\r\n    { id: 'P2', name: 'File Handler Process' },\r\n    { id: 'P3', name: 'Network Process' },\r\n    { id: 'P4', name: 'System Process' }\r\n  ];\r\n\r\n  const addLog = (message, type = 'info') => {\r\n    const timestamp = new Date().toLocaleTimeString();\r\n    const newLog = {\r\n      id: Date.now(),\r\n      timestamp,\r\n      message,\r\n      type\r\n    };\r\n    setLogs(prev => [newLog, ...prev].slice(0, 20)); // Keep only last 20 logs\r\n  };\r\n\r\n  const getRandomResource = () => {\r\n    const randomIndex = Math.floor(Math.random() * availableResources.length);\r\n    return availableResources[randomIndex];\r\n  };\r\n\r\n  const getRandomProcess = () => {\r\n    const randomIndex = Math.floor(Math.random() * availableProcesses.length);\r\n    return availableProcesses[randomIndex];\r\n  };\r\n\r\n  const allocateRandomResource = () => {\r\n    const resource = getRandomResource();\r\n    const process = getRandomProcess();\r\n    \r\n    const allocation = {\r\n      id: Date.now(),\r\n      resource: resource,\r\n      process: process,\r\n      timestamp: new Date().toLocaleTimeString()\r\n    };\r\n\r\n    setAllocatedResources(prev => [...prev, allocation]);\r\n    setCurrentAllocationCount(prev => prev + 1);\r\n    \r\n    addLog(`🔄 Resource ${resource.name} (${resource.fullName}) randomly allocated to ${process.name} (${process.id})`, 'allocation');\r\n  };\r\n\r\n  const startAllocation = () => {\r\n    if (!isRunning) {\r\n      setIsRunning(true);\r\n      setIsPaused(false);\r\n      addLog('🚀 Random resource allocation simulation started', 'system');\r\n      \r\n      intervalRef.current = setInterval(() => {\r\n        allocateRandomResource();\r\n      }, 2000); // Allocate every 2 seconds\r\n    }\r\n  };\r\n\r\n  const pauseAllocation = () => {\r\n    if (isRunning && !isPaused) {\r\n      setIsPaused(true);\r\n      clearInterval(intervalRef.current);\r\n      addLog('⏸️ Resource allocation paused', 'system');\r\n    } else if (isPaused) {\r\n      setIsPaused(false);\r\n      addLog('▶️ Resource allocation resumed', 'system');\r\n      intervalRef.current = setInterval(() => {\r\n        allocateRandomResource();\r\n      }, 2000);\r\n    }\r\n  };\r\n\r\n  const resetAllocation = () => {\r\n    setIsRunning(false);\r\n    setIsPaused(false);\r\n    setAllocatedResources([]);\r\n    setCurrentAllocationCount(0);\r\n    setLogs([]);\r\n    clearInterval(intervalRef.current);\r\n    addLog('🔄 System reset - all allocations cleared', 'system');\r\n  };\r\n\r\n  const scanForDeadlocks = () => {\r\n    addLog('🔍 Scanning for potential deadlocks...', 'scan');\r\n    setTimeout(() => {\r\n      const hasDeadlock = Math.random() > 0.7; // 30% chance of detecting deadlock\r\n      if (hasDeadlock) {\r\n        addLog('⚠️ Potential deadlock detected in resource allocation', 'warning');\r\n      } else {\r\n        addLog('✅ No deadlocks detected - system running smoothly', 'success');\r\n      }\r\n    }, 1000);\r\n  };\r\n\r\n  const resolveDeadlocks = () => {\r\n    addLog('⚡ Attempting to resolve deadlocks...', 'resolve');\r\n    setTimeout(() => {\r\n      addLog('✅ Deadlock resolution completed successfully', 'success');\r\n    }, 1500);\r\n  };\r\n\r\n  const forceLock = () => {\r\n    addLog('☠️ Forcing artificial deadlock scenario...', 'warning');\r\n    setTimeout(() => {\r\n      addLog('🔒 Artificial deadlock created for testing purposes', 'error');\r\n    }, 1000);\r\n  };\r\n\r\n  const buttons = [\r\n    { label: '▶ Start', className: 'controls__btn--start', onClick: startAllocation, disabled: isRunning && !isPaused },\r\n    { label: '⏸ Pause', className: 'controls__btn--pause', onClick: pauseAllocation, disabled: !isRunning },\r\n    { label: '⟲ Reset', className: 'controls__btn--reset', onClick: resetAllocation },\r\n    { label: '🔍 Scan', className: 'controls__btn--scan', onClick: scanForDeadlocks },\r\n    { label: '⚡ Resolve', className: 'controls__btn--resolve', onClick: resolveDeadlocks },\r\n    { label: '☠ Force Lock', className: 'controls__btn--force', onClick: forceLock },\r\n  ];\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      if (intervalRef.current) {\r\n        clearInterval(intervalRef.current);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  const getStatusText = () => {\r\n    if (isRunning && isPaused) return 'Paused';\r\n    if (isRunning) return 'Running';\r\n    return 'Stopped';\r\n  };\r\n\r\n  const getStatusClass = () => {\r\n    if (isRunning && isPaused) return 'status--paused';\r\n    if (isRunning) return 'status--running';\r\n    return 'status--stopped';\r\n  };\r\n\r\n  return (\r\n    <section className=\"panel controls-status\">\r\n      <div className=\"controls\">\r\n        {buttons.map((button, index) => (\r\n          <button \r\n            key={index} \r\n            className={`controls__btn ${button.className}`}\r\n            onClick={button.onClick}\r\n            disabled={button.disabled}\r\n          >\r\n            {button.label}\r\n          </button>\r\n        ))}\r\n      </div>\r\n      \r\n      <div className=\"system-status\">\r\n        <h3 className=\"system-status__title\">System Status</h3>\r\n        \r\n        <div className=\"status-overview\">\r\n          <div className={`status-indicator ${getStatusClass()}`}>\r\n            Status: {getStatusText()}\r\n          </div>\r\n          <div className=\"allocation-counter\">\r\n            Resources Allocated: {currentAllocationCount}\r\n          </div>\r\n          <div className=\"active-processes\">\r\n            Active Processes: {availableProcesses.length}\r\n          </div>\r\n        </div>\r\n\r\n        {allocatedResources.length > 0 && (\r\n          <div className=\"recent-allocations\">\r\n            <h4>Recent Allocations:</h4>\r\n            <div className=\"allocation-list\">\r\n              {allocatedResources.slice(-3).reverse().map((allocation) => (\r\n                <div key={allocation.id} className=\"allocation-item\">\r\n                  <span className=\"allocation-resource\">{allocation.resource.name}</span>\r\n                  <span className=\"allocation-arrow\">→</span>\r\n                  <span className=\"allocation-process\">{allocation.process.id}</span>\r\n                  <span className=\"allocation-time\">{allocation.timestamp}</span>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        <div className=\"system-logs\">\r\n          <h4>System Logs:</h4>\r\n          <div className=\"logs-container\">\r\n            {logs.length === 0 ? (\r\n              <div className=\"log-entry log--info\">\r\n                [System] Ready for random resource allocation...\r\n              </div>\r\n            ) : (\r\n              logs.map((log) => (\r\n                <div key={log.id} className={`log-entry log--${log.type}`}>\r\n                  <span className=\"log-timestamp\">[{log.timestamp}]</span>\r\n                  <span className=\"log-message\">{log.message}</span>\r\n                </div>\r\n              ))\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default ControlsStatus;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}