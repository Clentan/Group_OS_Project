{"ast":null,"code":"var _jsxFileName = \"E:\\\\Group_OS_Project\\\\src\\\\pages\\\\Simulation\\\\controls\\\\ControlsStatus\\\\ControlsStatus.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './ControlsStatus.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ControlsStatus = ({\n  onResourceAllocation,\n  setCurrentPage\n}) => {\n  _s();\n  const [isRunning, setIsRunning] = useState(false);\n  const [isPaused, setIsPaused] = useState(false);\n  const [logs, setLogs] = useState([]);\n  const [allocatedResources, setAllocatedResources] = useState([]);\n  const [currentAllocationCount, setCurrentAllocationCount] = useState(0);\n  const [deadlockDetected, setDeadlockDetected] = useState(false);\n  const [deadlockDetails, setDeadlockDetails] = useState(null);\n  const intervalRef = useRef(null);\n\n  // Available resources from ResourcePool\n  const availableResources = [{\n    name: 'DB',\n    fullName: 'Database',\n    icon: 'fas fa-database'\n  }, {\n    name: 'FILE',\n    fullName: 'File System',\n    icon: 'fas fa-file'\n  }, {\n    name: 'NET',\n    fullName: 'Network',\n    icon: 'fas fa-network-wired'\n  }, {\n    name: 'LOCK',\n    fullName: 'Lock Manager',\n    icon: 'fas fa-lock'\n  }];\n\n  // Available processes from ProcessPool\n  const availableProcesses = [{\n    id: 'P1',\n    name: 'Database Process'\n  }, {\n    id: 'P2',\n    name: 'File Handler Process'\n  }, {\n    id: 'P3',\n    name: 'Network Process'\n  }, {\n    id: 'P4',\n    name: 'System Process'\n  }];\n  const addLog = (message, type = 'info', details = null) => {\n    const timestamp = new Date().toLocaleTimeString();\n    const newLog = {\n      id: Date.now(),\n      timestamp,\n      message,\n      type,\n      details,\n      fullTimestamp: new Date().toISOString()\n    };\n    setLogs(prev => [newLog, ...prev].slice(0, 50)); // Keep only last 50 logs\n  };\n  const getRandomResource = () => {\n    const randomIndex = Math.floor(Math.random() * availableResources.length);\n    return availableResources[randomIndex];\n  };\n  const getRandomProcess = () => {\n    const randomIndex = Math.floor(Math.random() * availableProcesses.length);\n    return availableProcesses[randomIndex];\n  };\n  const detectDeadlock = newAllocations => {\n    // Simple deadlock detection algorithm\n    const processResourceMap = new Map();\n    const processWantsMap = new Map();\n\n    // Map current allocations\n    newAllocations.forEach(allocation => {\n      if (!processResourceMap.has(allocation.process.id)) {\n        processResourceMap.set(allocation.process.id, []);\n      }\n      processResourceMap.get(allocation.process.id).push(allocation.resource.name);\n    });\n\n    // Define what each process wants (simplified)\n    const processWants = {\n      'P1': ['DB', 'LOCK'],\n      'P2': ['FILE', 'NET'],\n      'P3': ['NET', 'DB'],\n      'P4': ['LOCK', 'FILE']\n    };\n\n    // Check for circular wait condition\n    for (const [processId, heldResources] of processResourceMap) {\n      const wantedResources = processWants[processId] || [];\n      for (const wantedResource of wantedResources) {\n        if (!heldResources.includes(wantedResource)) {\n          // Check if another process holds this resource\n          for (const [otherProcessId, otherHeldResources] of processResourceMap) {\n            if (otherProcessId !== processId && otherHeldResources.includes(wantedResource)) {\n              const otherWantedResources = processWants[otherProcessId] || [];\n\n              // Check if the other process wants something this process holds\n              const circularDependency = otherWantedResources.some(resource => heldResources.includes(resource));\n              if (circularDependency) {\n                return {\n                  detected: true,\n                  type: 'circular-wait',\n                  processes: [processId, otherProcessId],\n                  resources: [wantedResource, ...heldResources.filter(r => otherWantedResources.includes(r))],\n                  conditions: {\n                    mutualExclusion: true,\n                    holdAndWait: true,\n                    noPreemption: true,\n                    circularWait: true\n                  }\n                };\n              }\n            }\n          }\n        }\n      }\n    }\n    return {\n      detected: false\n    };\n  };\n  const allocateRandomResource = () => {\n    const resource = getRandomResource();\n    const process = getRandomProcess();\n    const allocation = {\n      id: Date.now(),\n      resource: resource,\n      process: process,\n      timestamp: new Date().toLocaleTimeString()\n    };\n    const newAllocations = [...allocatedResources, allocation];\n    setAllocatedResources(newAllocations);\n    const newCount = currentAllocationCount + 1;\n    setCurrentAllocationCount(newCount);\n\n    // Pass allocation to parent component\n    if (onResourceAllocation) {\n      onResourceAllocation(newAllocations);\n    }\n    addLog(`üîÑ Resource ${resource.name} (${resource.fullName}) randomly allocated to ${process.name} (${process.id})`, 'allocation');\n\n    // Create realistic deadlock after 5 allocations\n    if (newCount === 5) {\n      // Stop the allocation process\n      setIsRunning(false);\n      clearInterval(intervalRef.current);\n\n      // Create a realistic deadlock scenario:\n      // P1 holds DB, wants LOCK\n      // P2 holds LOCK, wants DB\n      const deadlockAllocations = [{\n        id: Date.now() + 1,\n        resource: {\n          name: 'DB',\n          fullName: 'Database'\n        },\n        process: {\n          id: 'P1',\n          name: 'Database Process'\n        },\n        timestamp: new Date().toLocaleTimeString()\n      }, {\n        id: Date.now() + 2,\n        resource: {\n          name: 'LOCK',\n          fullName: 'Lock Manager'\n        },\n        process: {\n          id: 'P2',\n          name: 'File Handler Process'\n        },\n        timestamp: new Date().toLocaleTimeString()\n      }];\n      const finalAllocations = [...newAllocations, ...deadlockAllocations];\n      setAllocatedResources(finalAllocations);\n      if (onResourceAllocation) {\n        onResourceAllocation(finalAllocations);\n      }\n\n      // Set deadlock state\n      setDeadlockDetected(true);\n      setDeadlockDetails({\n        detected: true,\n        type: 'hold-and-wait-deadlock',\n        processes: ['P1', 'P2'],\n        resources: ['DB', 'LOCK'],\n        conditions: {\n          mutualExclusion: true,\n          holdAndWait: true,\n          noPreemption: true,\n          circularWait: true\n        },\n        description: 'P1 holds DB and wants LOCK, P2 holds LOCK and wants DB'\n      });\n      addLog('‚ö†Ô∏è DEADLOCK SCENARIO TRIGGERED: After 5 allocations', 'warning');\n      addLog('üîí P1 (Database Process) holds DB resource and is waiting for LOCK', 'deadlock');\n      addLog('üîí P2 (File Handler Process) holds LOCK resource and is waiting for DB', 'deadlock');\n      addLog('‚ò†Ô∏è DEADLOCK DETECTED: Hold-and-Wait condition between P1 and P2', 'deadlock');\n      addLog('üîç Deadlock Analysis: P1 wants what P2 holds, P2 wants what P1 holds', 'deadlock-analysis');\n      addLog('üõë SIMULATION STOPPED: Resources not released, processes waiting indefinitely', 'error');\n      addLog('‚ö° Press RESOLVE button to preempt resources and break the deadlock', 'info');\n      return; // Stop further processing\n    }\n\n    // Check for natural deadlock after allocation (only if not forced)\n    const deadlockResult = detectDeadlock(newAllocations);\n    if (deadlockResult.detected) {\n      setIsRunning(false);\n      clearInterval(intervalRef.current);\n      setDeadlockDetected(true);\n      setDeadlockDetails(deadlockResult);\n      addLog(`‚ò†Ô∏è NATURAL DEADLOCK DETECTED: ${deadlockResult.type} between processes ${deadlockResult.processes.join(', ')}`, 'deadlock', deadlockResult);\n      addLog(`üîç Deadlock Conditions Met: Mutual Exclusion ‚úì, Hold & Wait ‚úì, No Preemption ‚úì, Circular Wait ‚úì`, 'deadlock-analysis');\n      addLog('üõë SIMULATION STOPPED: Deadlock detected, manual intervention required', 'error');\n    }\n  };\n  const startAllocation = () => {\n    if (!isRunning && !deadlockDetected) {\n      setIsRunning(true);\n      setIsPaused(false);\n      addLog('üöÄ Random resource allocation simulation started', 'system');\n      intervalRef.current = setInterval(() => {\n        allocateRandomResource();\n      }, 3000); // Allocate every 3 seconds\n    } else if (deadlockDetected) {\n      addLog('üö´ Cannot start: Deadlock detected. Please resolve first.', 'error');\n    }\n  };\n  const pauseAllocation = () => {\n    if (isRunning && !isPaused) {\n      setIsPaused(true);\n      clearInterval(intervalRef.current);\n      addLog('‚è∏Ô∏è Resource allocation paused', 'system');\n    } else if (isPaused) {\n      setIsPaused(false);\n      addLog('‚ñ∂Ô∏è Resource allocation resumed', 'system');\n      intervalRef.current = setInterval(() => {\n        allocateRandomResource();\n      }, 3000);\n    }\n  };\n  const resetAllocation = () => {\n    setIsRunning(false);\n    setIsPaused(false);\n    setAllocatedResources([]);\n    setCurrentAllocationCount(0);\n    setDeadlockDetected(false);\n    setDeadlockDetails(null);\n    setLogs([]);\n    clearInterval(intervalRef.current);\n    if (onResourceAllocation) {\n      onResourceAllocation([]);\n    }\n    addLog('üîÑ System reset - all allocations cleared', 'system');\n  };\n  const scanForDeadlocks = () => {\n    addLog('üîç Scanning for potential deadlocks...', 'scan');\n    setTimeout(() => {\n      const deadlockResult = detectDeadlock(allocatedResources);\n      if (deadlockResult.detected) {\n        setDeadlockDetected(true);\n        setDeadlockDetails(deadlockResult);\n        addLog('‚ö†Ô∏è Deadlock confirmed during manual scan', 'warning');\n      } else {\n        addLog('‚úÖ No deadlocks detected - system running smoothly', 'success');\n      }\n    }, 1000);\n  };\n  const resolveDeadlocks = () => {\n    if (deadlockDetected) {\n      addLog('‚ö° Attempting to resolve deadlocks...', 'resolve');\n      setTimeout(() => {\n        // Simulate deadlock resolution by removing some allocations\n        const resolvedAllocations = allocatedResources.slice(0, -4); // Remove the forced deadlock allocations\n        setAllocatedResources(resolvedAllocations);\n        setDeadlockDetected(false);\n        setDeadlockDetails(null);\n        if (onResourceAllocation) {\n          onResourceAllocation(resolvedAllocations);\n        }\n        addLog('‚úÖ Deadlock resolution completed - resources preempted', 'success');\n        addLog('üîÑ System ready for restart - press START to continue', 'info');\n      }, 1500);\n    } else {\n      addLog('‚ÑπÔ∏è No active deadlocks to resolve', 'info');\n    }\n  };\n  const forceLock = () => {\n    addLog('‚ò†Ô∏è Forcing artificial deadlock scenario...', 'warning');\n    setTimeout(() => {\n      // Create a forced deadlock scenario\n      const forcedAllocations = [{\n        id: Date.now() + 1,\n        resource: {\n          name: 'DB',\n          fullName: 'Database'\n        },\n        process: {\n          id: 'P1',\n          name: 'Database Process'\n        },\n        timestamp: new Date().toLocaleTimeString()\n      }, {\n        id: Date.now() + 2,\n        resource: {\n          name: 'FILE',\n          fullName: 'File System'\n        },\n        process: {\n          id: 'P2',\n          name: 'File Handler Process'\n        },\n        timestamp: new Date().toLocaleTimeString()\n      }, {\n        id: Date.now() + 3,\n        resource: {\n          name: 'NET',\n          fullName: 'Network'\n        },\n        process: {\n          id: 'P3',\n          name: 'Network Process'\n        },\n        timestamp: new Date().toLocaleTimeString()\n      }, {\n        id: Date.now() + 4,\n        resource: {\n          name: 'LOCK',\n          fullName: 'Lock Manager'\n        },\n        process: {\n          id: 'P4',\n          name: 'System Process'\n        },\n        timestamp: new Date().toLocaleTimeString()\n      }];\n      setAllocatedResources(prev => [...prev, ...forcedAllocations]);\n      if (onResourceAllocation) {\n        onResourceAllocation([...allocatedResources, ...forcedAllocations]);\n      }\n      setDeadlockDetected(true);\n      setDeadlockDetails({\n        detected: true,\n        type: 'forced-circular-wait',\n        processes: ['P1', 'P2', 'P3', 'P4'],\n        resources: ['DB', 'FILE', 'NET', 'LOCK'],\n        conditions: {\n          mutualExclusion: true,\n          holdAndWait: true,\n          noPreemption: true,\n          circularWait: true\n        }\n      });\n      addLog('üîí Artificial deadlock created - all processes in circular wait', 'error');\n    }, 1000);\n  };\n  const openLogsExplorer = () => {\n    if (setCurrentPage) {\n      setCurrentPage('Logs Explorer');\n    }\n  };\n  const buttons = [{\n    label: '‚ñ∂ Start',\n    className: 'controls__btn--start',\n    onClick: startAllocation,\n    disabled: isRunning && !isPaused || deadlockDetected\n  }, {\n    label: '‚è∏ Pause',\n    className: 'controls__btn--pause',\n    onClick: pauseAllocation,\n    disabled: !isRunning\n  }, {\n    label: '‚ü≤ Reset',\n    className: 'controls__btn--reset',\n    onClick: resetAllocation\n  }, {\n    label: 'üîç Scan',\n    className: 'controls__btn--scan',\n    onClick: scanForDeadlocks\n  }, {\n    label: '‚ö° Resolve',\n    className: 'controls__btn--resolve',\n    onClick: resolveDeadlocks\n  }, {\n    label: '‚ò† Force Lock',\n    className: 'controls__btn--force',\n    onClick: forceLock\n  }];\n  useEffect(() => {\n    return () => {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    };\n  }, []);\n  const getStatusText = () => {\n    if (deadlockDetected) return 'Deadlocked';\n    if (isRunning && isPaused) return 'Paused';\n    if (isRunning) return 'Running';\n    return 'Stopped';\n  };\n  const getStatusClass = () => {\n    if (deadlockDetected) return 'status--deadlocked';\n    if (isRunning && isPaused) return 'status--paused';\n    if (isRunning) return 'status--running';\n    return 'status--stopped';\n  };\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"panel controls-status\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: buttons.map((button, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `controls__btn ${button.className}`,\n        onClick: button.onClick,\n        disabled: button.disabled,\n        children: button.label\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"system-status\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"system-status__title\",\n        children: \"System Status\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 378,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status-overview\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: `status-indicator ${getStatusClass()}`,\n          children: [\"Status: \", getStatusText()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 381,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"allocation-counter\",\n          children: [\"Resources Allocated: \", currentAllocationCount]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 384,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"active-processes\",\n          children: [\"Active Processes: \", availableProcesses.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 387,\n          columnNumber: 11\n        }, this), deadlockDetected && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"deadlock-alert\",\n          children: \"\\u26A0\\uFE0F DEADLOCK ACTIVE\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 391,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 9\n      }, this), deadlockDetected && deadlockDetails && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"deadlock-details\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"\\uD83D\\uDEA8 Deadlock Analysis:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 399,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"deadlock-info\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Type:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 401,\n              columnNumber: 20\n            }, this), \" \", deadlockDetails.type]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 401,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Affected Processes:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 402,\n              columnNumber: 20\n            }, this), \" \", deadlockDetails.processes.join(', ')]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 402,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Involved Resources:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 403,\n              columnNumber: 20\n            }, this), \" \", deadlockDetails.resources.join(', ')]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 403,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"deadlock-conditions\",\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Conditions Met:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 405,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: [/*#__PURE__*/_jsxDEV(\"li\", {\n                children: [\"\\uD83D\\uDD12 Mutual Exclusion: \", deadlockDetails.conditions.mutualExclusion ? '‚úì' : '‚úó']\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 407,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                children: [\"\\u23F3 Hold and Wait: \", deadlockDetails.conditions.holdAndWait ? '‚úì' : '‚úó']\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 408,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                children: [\"\\uD83D\\uDEAB No Preemption: \", deadlockDetails.conditions.noPreemption ? '‚úì' : '‚úó']\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 409,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                children: [\"\\uD83D\\uDD04 Circular Wait: \", deadlockDetails.conditions.circularWait ? '‚úì' : '‚úó']\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 410,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 406,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 404,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 400,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 398,\n        columnNumber: 11\n      }, this), allocatedResources.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"recent-allocations\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Recent Allocations:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 419,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"allocation-list\",\n          children: allocatedResources.slice(-3).reverse().map(allocation => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"allocation-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"allocation-resource\",\n              children: allocation.resource.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 423,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"allocation-arrow\",\n              children: \"\\u2192\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 424,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"allocation-process\",\n              children: allocation.process.id\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 425,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"allocation-time\",\n              children: allocation.timestamp\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 426,\n              columnNumber: 19\n            }, this)]\n          }, allocation.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 422,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 420,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 418,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"system-logs\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"logs-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"System Logs:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 435,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"explore-logs-btn\",\n            onClick: openLogsExplorer,\n            children: \"\\uD83D\\uDCCB Explore All Logs\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 436,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 434,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"logs-container\",\n          children: logs.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"log-entry log--info\",\n            children: \"[System] Ready for random resource allocation...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 442,\n            columnNumber: 15\n          }, this) : logs.slice(0, 10).map(log => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `log-entry log--${log.type}`,\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"log-timestamp\",\n              children: [\"[\", log.timestamp, \"]\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 448,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"log-message\",\n              children: log.message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 449,\n              columnNumber: 19\n            }, this)]\n          }, log.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 447,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 440,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 433,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 377,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 363,\n    columnNumber: 5\n  }, this);\n};\n_s(ControlsStatus, \"+6KwmASvU/baQ1kUfZOpTPTFLrQ=\");\n_c = ControlsStatus;\nexport default ControlsStatus;\nvar _c;\n$RefreshReg$(_c, \"ControlsStatus\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","ControlsStatus","onResourceAllocation","setCurrentPage","_s","isRunning","setIsRunning","isPaused","setIsPaused","logs","setLogs","allocatedResources","setAllocatedResources","currentAllocationCount","setCurrentAllocationCount","deadlockDetected","setDeadlockDetected","deadlockDetails","setDeadlockDetails","intervalRef","availableResources","name","fullName","icon","availableProcesses","id","addLog","message","type","details","timestamp","Date","toLocaleTimeString","newLog","now","fullTimestamp","toISOString","prev","slice","getRandomResource","randomIndex","Math","floor","random","length","getRandomProcess","detectDeadlock","newAllocations","processResourceMap","Map","processWantsMap","forEach","allocation","has","process","set","get","push","resource","processWants","processId","heldResources","wantedResources","wantedResource","includes","otherProcessId","otherHeldResources","otherWantedResources","circularDependency","some","detected","processes","resources","filter","r","conditions","mutualExclusion","holdAndWait","noPreemption","circularWait","allocateRandomResource","newCount","clearInterval","current","deadlockAllocations","finalAllocations","description","deadlockResult","join","startAllocation","setInterval","pauseAllocation","resetAllocation","scanForDeadlocks","setTimeout","resolveDeadlocks","resolvedAllocations","forceLock","forcedAllocations","openLogsExplorer","buttons","label","className","onClick","disabled","getStatusText","getStatusClass","children","map","button","index","fileName","_jsxFileName","lineNumber","columnNumber","reverse","log","_c","$RefreshReg$"],"sources":["E:/Group_OS_Project/src/pages/Simulation/controls/ControlsStatus/ControlsStatus.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport './ControlsStatus.css';\r\n\r\nconst ControlsStatus = ({ onResourceAllocation, setCurrentPage }) => {\r\n  const [isRunning, setIsRunning] = useState(false);\r\n  const [isPaused, setIsPaused] = useState(false);\r\n  const [logs, setLogs] = useState([]);\r\n  const [allocatedResources, setAllocatedResources] = useState([]);\r\n  const [currentAllocationCount, setCurrentAllocationCount] = useState(0);\r\n  const [deadlockDetected, setDeadlockDetected] = useState(false);\r\n  const [deadlockDetails, setDeadlockDetails] = useState(null);\r\n  const intervalRef = useRef(null);\r\n\r\n  // Available resources from ResourcePool\r\n  const availableResources = [\r\n    { name: 'DB', fullName: 'Database', icon: 'fas fa-database' },\r\n    { name: 'FILE', fullName: 'File System', icon: 'fas fa-file' },\r\n    { name: 'NET', fullName: 'Network', icon: 'fas fa-network-wired' },\r\n    { name: 'LOCK', fullName: 'Lock Manager', icon: 'fas fa-lock' }\r\n  ];\r\n\r\n  // Available processes from ProcessPool\r\n  const availableProcesses = [\r\n    { id: 'P1', name: 'Database Process' },\r\n    { id: 'P2', name: 'File Handler Process' },\r\n    { id: 'P3', name: 'Network Process' },\r\n    { id: 'P4', name: 'System Process' }\r\n  ];\r\n\r\n  const addLog = (message, type = 'info', details = null) => {\r\n    const timestamp = new Date().toLocaleTimeString();\r\n    const newLog = {\r\n      id: Date.now(),\r\n      timestamp,\r\n      message,\r\n      type,\r\n      details,\r\n      fullTimestamp: new Date().toISOString()\r\n    };\r\n    setLogs(prev => [newLog, ...prev].slice(0, 50)); // Keep only last 50 logs\r\n  };\r\n\r\n  const getRandomResource = () => {\r\n    const randomIndex = Math.floor(Math.random() * availableResources.length);\r\n    return availableResources[randomIndex];\r\n  };\r\n\r\n  const getRandomProcess = () => {\r\n    const randomIndex = Math.floor(Math.random() * availableProcesses.length);\r\n    return availableProcesses[randomIndex];\r\n  };\r\n\r\n  const detectDeadlock = (newAllocations) => {\r\n    // Simple deadlock detection algorithm\r\n    const processResourceMap = new Map();\r\n    const processWantsMap = new Map();\r\n    \r\n    // Map current allocations\r\n    newAllocations.forEach(allocation => {\r\n      if (!processResourceMap.has(allocation.process.id)) {\r\n        processResourceMap.set(allocation.process.id, []);\r\n      }\r\n      processResourceMap.get(allocation.process.id).push(allocation.resource.name);\r\n    });\r\n    \r\n    // Define what each process wants (simplified)\r\n    const processWants = {\r\n      'P1': ['DB', 'LOCK'],\r\n      'P2': ['FILE', 'NET'],\r\n      'P3': ['NET', 'DB'],\r\n      'P4': ['LOCK', 'FILE']\r\n    };\r\n    \r\n    // Check for circular wait condition\r\n    for (const [processId, heldResources] of processResourceMap) {\r\n      const wantedResources = processWants[processId] || [];\r\n      \r\n      for (const wantedResource of wantedResources) {\r\n        if (!heldResources.includes(wantedResource)) {\r\n          // Check if another process holds this resource\r\n          for (const [otherProcessId, otherHeldResources] of processResourceMap) {\r\n            if (otherProcessId !== processId && otherHeldResources.includes(wantedResource)) {\r\n              const otherWantedResources = processWants[otherProcessId] || [];\r\n              \r\n              // Check if the other process wants something this process holds\r\n              const circularDependency = otherWantedResources.some(resource => \r\n                heldResources.includes(resource)\r\n              );\r\n              \r\n              if (circularDependency) {\r\n                return {\r\n                  detected: true,\r\n                  type: 'circular-wait',\r\n                  processes: [processId, otherProcessId],\r\n                  resources: [wantedResource, ...heldResources.filter(r => otherWantedResources.includes(r))],\r\n                  conditions: {\r\n                    mutualExclusion: true,\r\n                    holdAndWait: true,\r\n                    noPreemption: true,\r\n                    circularWait: true\r\n                  }\r\n                };\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    return { detected: false };\r\n  };\r\n\r\n  const allocateRandomResource = () => {\r\n    const resource = getRandomResource();\r\n    const process = getRandomProcess();\r\n    \r\n    const allocation = {\r\n      id: Date.now(),\r\n      resource: resource,\r\n      process: process,\r\n      timestamp: new Date().toLocaleTimeString()\r\n    };\r\n\r\n    const newAllocations = [...allocatedResources, allocation];\r\n    setAllocatedResources(newAllocations);\r\n    const newCount = currentAllocationCount + 1;\r\n    setCurrentAllocationCount(newCount);\r\n    \r\n    // Pass allocation to parent component\r\n    if (onResourceAllocation) {\r\n      onResourceAllocation(newAllocations);\r\n    }\r\n    \r\n    addLog(`üîÑ Resource ${resource.name} (${resource.fullName}) randomly allocated to ${process.name} (${process.id})`, 'allocation');\r\n    \r\n    // Create realistic deadlock after 5 allocations\r\n    if (newCount === 5) {\r\n      // Stop the allocation process\r\n      setIsRunning(false);\r\n      clearInterval(intervalRef.current);\r\n      \r\n      // Create a realistic deadlock scenario:\r\n      // P1 holds DB, wants LOCK\r\n      // P2 holds LOCK, wants DB\r\n      const deadlockAllocations = [\r\n        { \r\n          id: Date.now() + 1, \r\n          resource: { name: 'DB', fullName: 'Database' }, \r\n          process: { id: 'P1', name: 'Database Process' }, \r\n          timestamp: new Date().toLocaleTimeString() \r\n        },\r\n        { \r\n          id: Date.now() + 2, \r\n          resource: { name: 'LOCK', fullName: 'Lock Manager' }, \r\n          process: { id: 'P2', name: 'File Handler Process' }, \r\n          timestamp: new Date().toLocaleTimeString() \r\n        }\r\n      ];\r\n      \r\n      const finalAllocations = [...newAllocations, ...deadlockAllocations];\r\n      setAllocatedResources(finalAllocations);\r\n      \r\n      if (onResourceAllocation) {\r\n        onResourceAllocation(finalAllocations);\r\n      }\r\n      \r\n      // Set deadlock state\r\n      setDeadlockDetected(true);\r\n      setDeadlockDetails({\r\n        detected: true,\r\n        type: 'hold-and-wait-deadlock',\r\n        processes: ['P1', 'P2'],\r\n        resources: ['DB', 'LOCK'],\r\n        conditions: {\r\n          mutualExclusion: true,\r\n          holdAndWait: true,\r\n          noPreemption: true,\r\n          circularWait: true\r\n        },\r\n        description: 'P1 holds DB and wants LOCK, P2 holds LOCK and wants DB'\r\n      });\r\n      \r\n      addLog('‚ö†Ô∏è DEADLOCK SCENARIO TRIGGERED: After 5 allocations', 'warning');\r\n      addLog('üîí P1 (Database Process) holds DB resource and is waiting for LOCK', 'deadlock');\r\n      addLog('üîí P2 (File Handler Process) holds LOCK resource and is waiting for DB', 'deadlock');\r\n      addLog('‚ò†Ô∏è DEADLOCK DETECTED: Hold-and-Wait condition between P1 and P2', 'deadlock');\r\n      addLog('üîç Deadlock Analysis: P1 wants what P2 holds, P2 wants what P1 holds', 'deadlock-analysis');\r\n      addLog('üõë SIMULATION STOPPED: Resources not released, processes waiting indefinitely', 'error');\r\n      addLog('‚ö° Press RESOLVE button to preempt resources and break the deadlock', 'info');\r\n      \r\n      return; // Stop further processing\r\n    }\r\n    \r\n    // Check for natural deadlock after allocation (only if not forced)\r\n    const deadlockResult = detectDeadlock(newAllocations);\r\n    if (deadlockResult.detected) {\r\n      setIsRunning(false);\r\n      clearInterval(intervalRef.current);\r\n      setDeadlockDetected(true);\r\n      setDeadlockDetails(deadlockResult);\r\n      addLog(\r\n        `‚ò†Ô∏è NATURAL DEADLOCK DETECTED: ${deadlockResult.type} between processes ${deadlockResult.processes.join(', ')}`,\r\n        'deadlock',\r\n        deadlockResult\r\n      );\r\n      addLog(\r\n        `üîç Deadlock Conditions Met: Mutual Exclusion ‚úì, Hold & Wait ‚úì, No Preemption ‚úì, Circular Wait ‚úì`,\r\n        'deadlock-analysis'\r\n      );\r\n      addLog('üõë SIMULATION STOPPED: Deadlock detected, manual intervention required', 'error');\r\n    }\r\n  };\r\n\r\n  const startAllocation = () => {\r\n    if (!isRunning && !deadlockDetected) {\r\n      setIsRunning(true);\r\n      setIsPaused(false);\r\n      addLog('üöÄ Random resource allocation simulation started', 'system');\r\n      \r\n      intervalRef.current = setInterval(() => {\r\n        allocateRandomResource();\r\n      }, 3000); // Allocate every 3 seconds\r\n    } else if (deadlockDetected) {\r\n      addLog('üö´ Cannot start: Deadlock detected. Please resolve first.', 'error');\r\n    }\r\n  };\r\n\r\n  const pauseAllocation = () => {\r\n    if (isRunning && !isPaused) {\r\n      setIsPaused(true);\r\n      clearInterval(intervalRef.current);\r\n      addLog('‚è∏Ô∏è Resource allocation paused', 'system');\r\n    } else if (isPaused) {\r\n      setIsPaused(false);\r\n      addLog('‚ñ∂Ô∏è Resource allocation resumed', 'system');\r\n      intervalRef.current = setInterval(() => {\r\n        allocateRandomResource();\r\n      }, 3000);\r\n    }\r\n  };\r\n\r\n  const resetAllocation = () => {\r\n    setIsRunning(false);\r\n    setIsPaused(false);\r\n    setAllocatedResources([]);\r\n    setCurrentAllocationCount(0);\r\n    setDeadlockDetected(false);\r\n    setDeadlockDetails(null);\r\n    setLogs([]);\r\n    clearInterval(intervalRef.current);\r\n    if (onResourceAllocation) {\r\n      onResourceAllocation([]);\r\n    }\r\n    addLog('üîÑ System reset - all allocations cleared', 'system');\r\n  };\r\n\r\n  const scanForDeadlocks = () => {\r\n    addLog('üîç Scanning for potential deadlocks...', 'scan');\r\n    setTimeout(() => {\r\n      const deadlockResult = detectDeadlock(allocatedResources);\r\n      if (deadlockResult.detected) {\r\n        setDeadlockDetected(true);\r\n        setDeadlockDetails(deadlockResult);\r\n        addLog('‚ö†Ô∏è Deadlock confirmed during manual scan', 'warning');\r\n      } else {\r\n        addLog('‚úÖ No deadlocks detected - system running smoothly', 'success');\r\n      }\r\n    }, 1000);\r\n  };\r\n\r\n  const resolveDeadlocks = () => {\r\n    if (deadlockDetected) {\r\n      addLog('‚ö° Attempting to resolve deadlocks...', 'resolve');\r\n      setTimeout(() => {\r\n        // Simulate deadlock resolution by removing some allocations\r\n        const resolvedAllocations = allocatedResources.slice(0, -4); // Remove the forced deadlock allocations\r\n        setAllocatedResources(resolvedAllocations);\r\n        setDeadlockDetected(false);\r\n        setDeadlockDetails(null);\r\n        if (onResourceAllocation) {\r\n          onResourceAllocation(resolvedAllocations);\r\n        }\r\n        addLog('‚úÖ Deadlock resolution completed - resources preempted', 'success');\r\n        addLog('üîÑ System ready for restart - press START to continue', 'info');\r\n      }, 1500);\r\n    } else {\r\n      addLog('‚ÑπÔ∏è No active deadlocks to resolve', 'info');\r\n    }\r\n  };\r\n\r\n  const forceLock = () => {\r\n    addLog('‚ò†Ô∏è Forcing artificial deadlock scenario...', 'warning');\r\n    setTimeout(() => {\r\n      // Create a forced deadlock scenario\r\n      const forcedAllocations = [\r\n        { id: Date.now() + 1, resource: { name: 'DB', fullName: 'Database' }, process: { id: 'P1', name: 'Database Process' }, timestamp: new Date().toLocaleTimeString() },\r\n        { id: Date.now() + 2, resource: { name: 'FILE', fullName: 'File System' }, process: { id: 'P2', name: 'File Handler Process' }, timestamp: new Date().toLocaleTimeString() },\r\n        { id: Date.now() + 3, resource: { name: 'NET', fullName: 'Network' }, process: { id: 'P3', name: 'Network Process' }, timestamp: new Date().toLocaleTimeString() },\r\n        { id: Date.now() + 4, resource: { name: 'LOCK', fullName: 'Lock Manager' }, process: { id: 'P4', name: 'System Process' }, timestamp: new Date().toLocaleTimeString() }\r\n      ];\r\n      \r\n      setAllocatedResources(prev => [...prev, ...forcedAllocations]);\r\n      if (onResourceAllocation) {\r\n        onResourceAllocation([...allocatedResources, ...forcedAllocations]);\r\n      }\r\n      \r\n      setDeadlockDetected(true);\r\n      setDeadlockDetails({\r\n        detected: true,\r\n        type: 'forced-circular-wait',\r\n        processes: ['P1', 'P2', 'P3', 'P4'],\r\n        resources: ['DB', 'FILE', 'NET', 'LOCK'],\r\n        conditions: {\r\n          mutualExclusion: true,\r\n          holdAndWait: true,\r\n          noPreemption: true,\r\n          circularWait: true\r\n        }\r\n      });\r\n      \r\n      addLog('üîí Artificial deadlock created - all processes in circular wait', 'error');\r\n    }, 1000);\r\n  };\r\n\r\n  const openLogsExplorer = () => {\r\n    if (setCurrentPage) {\r\n      setCurrentPage('Logs Explorer');\r\n    }\r\n  };\r\n\r\n  const buttons = [\r\n    { label: '‚ñ∂ Start', className: 'controls__btn--start', onClick: startAllocation, disabled: (isRunning && !isPaused) || deadlockDetected },\r\n    { label: '‚è∏ Pause', className: 'controls__btn--pause', onClick: pauseAllocation, disabled: !isRunning },\r\n    { label: '‚ü≤ Reset', className: 'controls__btn--reset', onClick: resetAllocation },\r\n    { label: 'üîç Scan', className: 'controls__btn--scan', onClick: scanForDeadlocks },\r\n    { label: '‚ö° Resolve', className: 'controls__btn--resolve', onClick: resolveDeadlocks },\r\n    { label: '‚ò† Force Lock', className: 'controls__btn--force', onClick: forceLock },\r\n  ];\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      if (intervalRef.current) {\r\n        clearInterval(intervalRef.current);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  const getStatusText = () => {\r\n    if (deadlockDetected) return 'Deadlocked';\r\n    if (isRunning && isPaused) return 'Paused';\r\n    if (isRunning) return 'Running';\r\n    return 'Stopped';\r\n  };\r\n\r\n  const getStatusClass = () => {\r\n    if (deadlockDetected) return 'status--deadlocked';\r\n    if (isRunning && isPaused) return 'status--paused';\r\n    if (isRunning) return 'status--running';\r\n    return 'status--stopped';\r\n  };\r\n\r\n  return (\r\n    <section className=\"panel controls-status\">\r\n      <div className=\"controls\">\r\n        {buttons.map((button, index) => (\r\n          <button \r\n            key={index} \r\n            className={`controls__btn ${button.className}`}\r\n            onClick={button.onClick}\r\n            disabled={button.disabled}\r\n          >\r\n            {button.label}\r\n          </button>\r\n        ))}\r\n      </div>\r\n      \r\n      <div className=\"system-status\">\r\n        <h3 className=\"system-status__title\">System Status</h3>\r\n        \r\n        <div className=\"status-overview\">\r\n          <div className={`status-indicator ${getStatusClass()}`}>\r\n            Status: {getStatusText()}\r\n          </div>\r\n          <div className=\"allocation-counter\">\r\n            Resources Allocated: {currentAllocationCount}\r\n          </div>\r\n          <div className=\"active-processes\">\r\n            Active Processes: {availableProcesses.length}\r\n          </div>\r\n          {deadlockDetected && (\r\n            <div className=\"deadlock-alert\">\r\n              ‚ö†Ô∏è DEADLOCK ACTIVE\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        {deadlockDetected && deadlockDetails && (\r\n          <div className=\"deadlock-details\">\r\n            <h4>üö® Deadlock Analysis:</h4>\r\n            <div className=\"deadlock-info\">\r\n              <div><strong>Type:</strong> {deadlockDetails.type}</div>\r\n              <div><strong>Affected Processes:</strong> {deadlockDetails.processes.join(', ')}</div>\r\n              <div><strong>Involved Resources:</strong> {deadlockDetails.resources.join(', ')}</div>\r\n              <div className=\"deadlock-conditions\">\r\n                <strong>Conditions Met:</strong>\r\n                <ul>\r\n                  <li>üîí Mutual Exclusion: {deadlockDetails.conditions.mutualExclusion ? '‚úì' : '‚úó'}</li>\r\n                  <li>‚è≥ Hold and Wait: {deadlockDetails.conditions.holdAndWait ? '‚úì' : '‚úó'}</li>\r\n                  <li>üö´ No Preemption: {deadlockDetails.conditions.noPreemption ? '‚úì' : '‚úó'}</li>\r\n                  <li>üîÑ Circular Wait: {deadlockDetails.conditions.circularWait ? '‚úì' : '‚úó'}</li>\r\n                </ul>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {allocatedResources.length > 0 && (\r\n          <div className=\"recent-allocations\">\r\n            <h4>Recent Allocations:</h4>\r\n            <div className=\"allocation-list\">\r\n              {allocatedResources.slice(-3).reverse().map((allocation) => (\r\n                <div key={allocation.id} className=\"allocation-item\">\r\n                  <span className=\"allocation-resource\">{allocation.resource.name}</span>\r\n                  <span className=\"allocation-arrow\">‚Üí</span>\r\n                  <span className=\"allocation-process\">{allocation.process.id}</span>\r\n                  <span className=\"allocation-time\">{allocation.timestamp}</span>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        <div className=\"system-logs\">\r\n          <div className=\"logs-header\">\r\n            <h4>System Logs:</h4>\r\n            <button className=\"explore-logs-btn\" onClick={openLogsExplorer}>\r\n              üìã Explore All Logs\r\n            </button>\r\n          </div>\r\n          <div className=\"logs-container\">\r\n            {logs.length === 0 ? (\r\n              <div className=\"log-entry log--info\">\r\n                [System] Ready for random resource allocation...\r\n              </div>\r\n            ) : (\r\n              logs.slice(0, 10).map((log) => (\r\n                <div key={log.id} className={`log-entry log--${log.type}`}>\r\n                  <span className=\"log-timestamp\">[{log.timestamp}]</span>\r\n                  <span className=\"log-message\">{log.message}</span>\r\n                </div>\r\n              ))\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default ControlsStatus;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}